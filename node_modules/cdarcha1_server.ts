// ====================== CONFIG.TS ===================

// url na backend
//var urlMain: string = "www.obalkyknih.cz"
//var urlMain: string = "192.168.0.165" //local
var urlMain: string = "195.113.155.152" //server

// url frontendu / spolecne url vsech frontnendu
//var urlReplace: string = "192.168.0.165:1337" //local
var urlReplace: string = "195.113.155.152" //server

// IP adresa backendu - udsud je mozne prijimat ridici prikazy
//var ipBackend: string = "192.168.0.165" //local
var ipBackend: string = "195.113.155.152" //server

var urlPart: string = "/"
var urlUpload: string = "file/upload"
var apiImport: string = "api/import"
var apiChecksum: string = "api/gethash"
var apiGetMedia: string = "api/getmedia"
var urlMetadata: string = "api/media"
var urlCoverFile: string = "file/cover"
var urlCoverApi: string = "api/cover"
var urlMasterFile: string = "file/master"
var urlParams: string = "?books="
var urlStorage: string = "storage/"
var urlTocFile: string = "file/toc"
var urlTocApiThumbnail: string = "api/toc/thumbnail"
var urlTocApiPdf: string = "api/toc/pdf"
var uriPartTocThumbnail: string = "/thumbnail"
var uriPartTocPdf: string = "/pdf"
var uriAlive: string = "runtime/alive"
// kolekcia s nastavenimi push API
var push_collection = "settings_push";
// kolekce s metadaty tak jak je pojmenovana v mongodb
var metaCollection: string = "media"
var filesCollection: string = "files"
var metaAuthCollection: string = "okcz_auth"
// timeout dotazu na backend (ms)
var timeout: number = 20 * 1000; // zmena po prechodu na reverznu proxy na BE (stava se ze requesty expiruji; toto je docasne reseni)
//var timeout: number = 5 * 1000;
// doba, po ktere se opet zkusime doptat backendu po timeoutu (ms)
var timeOutDuration: number = 1 * 1000; // zmena po prechodu na reverznu proxy na BE (stava se ze requesty expiruji; toto je docasne reseni)
//var timeOutDuration: number = 1000 * 1000;
// doba, po ktere se opet pokusime stahnout nahled, pokud ho backend nemel (ms)
var timeNotfound: number = 86400 * 1000;
// adresar s TOC dokumenty
var tocFileDir: string = "/home/users/okcz/static/toc/"
// autority
var urlAuthMeta: string = "api/auth/meta"
var urlAuthMetaBE: string = "api/auth"
var urlAuthParams: string = "?auth="
var urlAuthCover: string = "api/auth/cover"
// temporary files
//var tmpFolder: string = "/home/lubo/workspace/cdarcha_server/tmp";
//var storageFolder: string = "/home/lubo/workspace/cdarcha_server/store";
var tmpFolder: string = "/home/cdarcha/cdarcha/tmp";
var storageFolder: string = "/mnt/cdarcha";

// =========================================

var request = require('request');
var toEan = require('to-ean').toEan;
var URL_lib = require('url');
var fileSystem = require('fs');
var md5 = require('MD5');
var http = require('http');
var qs = require('querystring');
var mongo = require('mongodb');
var crypto = require('crypto');
var partParser = require('book-part-parser');
var multipart = require('parse-multipart');

var cryptoPasskey: string = "0kcz,ApIv.3*";
var regexpSigla: any = new RegExp(/^[A-Z0-9]{6}$/);

var etags: any = {}; // obsahuje vsechny platne etag pro cache prohlizec


// ====================== BIBINFO.TS ===================

interface Bibdata {
  ean13: string;
  ismn: string;
  oclc: string;
  nbn: string;
  uuid: string;
  title: string;
  authors: string;
  year: string;
  part_year: string;
  part_year_orig: string;
  part_volume: string;
  part_volume_orig: string;
  part_name: string;
  part_name_orig: string;
  part_no: string;
  part_no_orig: string;
  part_note: string;
  part_note_orig: string;
}

class Bibinfo {

    ean13: string;
    ismn: string;
    oclc: string;
    nbn: string;
    uuid: string;
    title: string;
    authors: string;
    year: string;
    part_year: string;
    part_year_orig: string;
    part_volume: string;
    part_volume_orig: string;
    part_name: string;
    part_name_orig: string;
    part_no: string;
    part_no_orig: string;
    part_note: string;
    part_note_orig: string;

    constructor(bibinfo: Bibdata) {
        this.ean13 = bibinfo.ean13,
        this.ismn = bibinfo.ismn,
        this.oclc = bibinfo.oclc,
        this.nbn = bibinfo.nbn,
        this.uuid = bibinfo.uuid,
        this.title = bibinfo.title,
        this.authors = bibinfo.authors,
        this.year = bibinfo.year,
        this.part_year = bibinfo.part_year,
        this.part_year_orig = bibinfo.part_year_orig,
        this.part_volume = bibinfo.part_volume,
        this.part_volume_orig = bibinfo.part_volume_orig,
        this.part_name = bibinfo.part_name,
        this.part_name_orig = bibinfo.part_name_orig,
        this.part_no = bibinfo.part_no,
        this.part_no_orig = bibinfo.part_no_orig,
        this.part_note = bibinfo.part_note,
        this.part_note_orig = bibinfo.part_note_orig
    }

    static search(s: any, bibinfo: Bibdata, callback) {
        var dbFind = [];
        if (bibinfo.ean13) dbFind.push({ ean13: bibinfo.ean13 });
        if (bibinfo.nbn) dbFind.push({ nbn: bibinfo.nbn });
        if (bibinfo.oclc) dbFind.push({ oclc: bibinfo.oclc });
        if (bibinfo.ismn) dbFind.push({ ismn: bibinfo.ismn });
        if (bibinfo.uuid) dbFind.push({ uuid: bibinfo.uuid });

        s.db.collection(metaCollection).find({ $or: dbFind }).toArray(function(err, items) {
            if (items.length) {
                for (var i: number = 0; i < items.length; i++) {
                    var item = items[i];
                    console.dir(item);

                    // 0 = ean13
                    // 1 = nbn
                    // 2 = oclc
                    // 3 = ismn
                    // 4 = uuid
                    for (var j: number = 0; j <= 4; j++) {
                        if (j==0 && bibinfo.ean13 && item.ean13 && bibinfo.ean13 == item.ean13) {
                            console.log('found by EAN13');
                            callback(item);
                            return;
                        }
                        else if (j==1 && bibinfo.nbn && item.nbn && bibinfo.nbn == item.nbn) {
                            console.log('found by NBN');
                            callback(item);
                            return;
                        }
                        else if (j==2 && bibinfo.oclc && item.oclc && bibinfo.oclc == item.oclc) {
                            console.log('found by OCLC');
                            callback(item);
                            return;
                        }
                        else if (j==3 && bibinfo.ismn && item.ismn && bibinfo.ismn == item.ismn) {
                            console.log('found by ISMN');
                            callback(item);
                            return;
                        }
                        else if (j==4 && bibinfo.uuid && item.uuid && bibinfo.uuid == item.uuid) {
                            console.log('found by UUID');
                            callback(item);
                            return;
                        }
                    }
                }
            } else {
                console.log('not found');
                callback(undefined);
            }
        });
    }

    static insert(s: any, bibinfo: Bibdata, callback) {
        Object.keys(bibinfo).forEach(function(key) {
            if (key!='ean13' && key!='nbn' && key!='oclc' && key!='ismn' && key!='uuid' &&
                key!='title' && key!='authors' && key!='year' && key!='dtCreated' && key!='dtLastUpdate')
            {
                delete bibinfo[key];
            }
        });

        s.db.collection(metaCollection).insert(bibinfo, { w: 1 }, function(err, result) {
            if (err) {
                console.dir(err);
                callback(undefined);
            } else {
                callback(result);
            }
        });
    }

}


// ====================== STATISTICS.TS ===================

interface Stats {
    uptime: any;
    etag_match: any;
    etag_toc_pdf_match: any;
    etag_toc_thumbnail_match: any;
    etag_file_match: any;
    file_requests: any;
    timeout_count: any;
    meta_requests: any;
    meta_fetches: any;
    cover_requests: any;
    cover_api_requests: any;
    cover_api: any;
    cover_fetches: any;
    cover_notfound: any;
    toc_thumbnail_requests: any;
    toc_thumbnail_api_requests: any;
    toc_thumbnail_fetches: any;
    toc_thumbnail_notfound: any;
    toc_pdf_requests: any;
    toc_pdf_api_requests: any;
    toc_pdf_notfound: any;
    meta_removes: any;
    cover_removes: any;
    toc_thumbnail_removes: any;

    meta_count: any;
    cover_count: any;
    logs_count: any;
    timestamp: any;
    ip: any;
}


class Statistics {

    static etagCoverMatch: any = {}; // pocet dotazu na obalku kesovanych prohlizecem od spusteni
    static etagFileMatch: any = {}; // pocet dotazu na favicon, obalky-custom.js atd., kesovanych prohlizecem od spusteni
    static etagTocPdfMatch: any = {}; // pocet dotazu na TOC PDF, kesovanych prohlizecem od spusteni
    static etagTocThumbMatch: any = {}; // pocet dotazu na TOC nahled, kesovanych prohlizecem od spusteni
    static fileRequests: any = {}; // pocet dotazu na favicon, obalky-custom.js, atd.
    static fileMasterRequests: any = {}; // pocet dotazu na favicon, obalky-custom.js, atd.
    static metaRequests: any = {}; // pocet dotazu na metadata od spusteni
    static metaFetches: any = {}; // pocet nacteni metadat z backendu od spusteni
    static metaRemoves: any = 0; // pocet smazanych metadat z backendu od spusteni
    static metaAuthRequests: any = {}; // pocet dotazu na metadata od spusteni
    static metaAuthFetches: any = {}; // pocet nacteni metadat z backendu od spusteni
    static metaAuthRemoves: any = 0; // pocet smazanych metadat z backendu od spusteni
    static coverRequests: any = {}; // pocet dotazu obalky pres urlCoverFile od spusteni
    static coverApiRequests: any = {}; // pocet dotazu obalky pres urlCoverApi od spusteni
    static coverFetches: any = {}; // pocet nacteni obalky z backendu od spusteni
    static coverNotfound: any = {}; // pocet nenalezenych obalek z backendu od spusteni
    static coverRemoves: any = 0; // pocet smazanych obalek z backendu od spusteni
    static tocThumbnailRequests: any = {}; // pocet dotazu TOC nahledu pres urlTocFile thumbnail (/file/toc/xxxxxx/thumbnail) od spusteni
    static tocThumbnailApiRequests: any = {}; // pocet dotazu TOC nahledu pres urlTocApi thumbnail od spusteni
    static tocThumbnailFetches: any = {}; // pocet nacteni TOC nahledu z backendu od spusteni
    static tocThumbnailNotfound: any = {}; // pocet nenalezenych TOC nahledu z backendu od spusteni
    static tocThumbnailRemoves: any = 0; // pocet smazanych TOC nahledu z backendu od spusteni
    static tocPdfRequests: any = {}; // pocet dotazu na TOC dokumenty pres urlTocFile thumbnail (/file/toc/xxxxxx/thumbnail) od spusteni
    static tocPdfApiRequests: any = {}; // pocet dotazu na TOC dokumenty pres urlTocApiThumbnail od spusteni
    static tocPdfNotfound: any = {}; // pocet nenalezenych na TOC dokumenty z backendu od spusteni
    static timeoutCount: any = {}; // pocet timeout nedostupnosti backendu od spusteni
    static authMetaRequests: any = {}; // pocet dotazu na auth metadata od spusteni
    static authMetaFetches: any = {}; // pocet nacteni auth metadat z backendu od spusteni
    static authCoverApiRequests: any = {}; // pocet dotazu obalky pres urlAuthCover od spusteni

    static dateTimeout: any = 0; // cas do kdy je platny timeout
    static dateStartup: any = new Date(); // doba startu

    static addEtagFileMatch(sigla: any) {
        this.etagFileMatch[sigla]++ || (this.etagFileMatch[sigla] = 1);
        if (sigla != 'admin') this.etagFileMatch.admin++ || (this.etagFileMatch.admin = 1);
    }

    static addEtagTocPdfMatch(sigla: any) {
        this.etagTocPdfMatch[sigla]++ || (this.etagTocPdfMatch[sigla] = 1);
        if (sigla != 'admin') this.etagTocPdfMatch.admin++ || (this.etagTocPdfMatch.admin = 1);
    }

    static addEtagTocThumbMatch(sigla: any) {
        this.etagTocThumbMatch[sigla]++ || (this.etagTocThumbMatch[sigla] = 1);
        if (sigla != 'admin') this.etagTocThumbMatch.admin++ || (this.etagTocThumbMatch.admin = 1);
    }

    static addEtagCoverMatch(sigla: any) {
        this.etagCoverMatch[sigla]++ || (this.etagCoverMatch[sigla] = 1);
        if (sigla != 'admin') this.etagCoverMatch.admin++ || (this.etagCoverMatch.admin = 1);
    }

    static addFileRequests(sigla: any) {
        this.fileRequests[sigla]++ || (this.fileRequests[sigla] = 1);
        if (sigla != 'admin') this.fileRequests.admin++ || (this.fileRequests.admin = 1);
    }

    static addFileMasterRequests(sigla: any) {
        this.fileMasterRequests[sigla]++ || (this.fileMasterRequests[sigla] = 1);
        if (sigla != 'admin') this.fileMasterRequests.admin++ || (this.fileMasterRequests.admin = 1);
    }

    static addCoverRequests(sigla: any) {
        this.coverRequests[sigla]++ || (this.coverRequests[sigla] = 1);
        if (sigla != 'admin') this.coverRequests.admin++ || (this.coverRequests.admin = 1);
    }

    static addTocThumbnailRequests(sigla: any) {
        this.tocThumbnailRequests[sigla]++ || (this.tocThumbnailRequests[sigla] = 1);
        if (sigla != 'admin') this.tocThumbnailRequests.admin++ || (this.tocThumbnailRequests.admin = 1);
    }

    static addTocPdfRequests(sigla: any) {
        this.tocPdfRequests[sigla]++ || (this.tocPdfRequests[sigla] = 1);
        if (sigla != 'admin') this.tocPdfRequests.admin++ || (this.tocPdfRequests.admin = 1);
    }

    static addCoverApiRequests(sigla: any) {
        this.coverApiRequests[sigla]++ || (this.coverApiRequests[sigla] = 1);
        if (sigla != 'admin') this.coverApiRequests.admin++ || (this.coverApiRequests.admin = 1);
    }

    static addTocThumbnailApiRequests(sigla: any) {
        this.tocThumbnailApiRequests[sigla]++ || (this.tocThumbnailApiRequests[sigla] = 1);
        if (sigla != 'admin') this.tocThumbnailApiRequests.admin++ || (this.tocThumbnailApiRequests.admin = 1);
    }

    static addTocPdfApiRequests(sigla: any) {
        this.tocPdfApiRequests[sigla]++ || (this.tocPdfApiRequests[sigla] = 1);
        if (sigla != 'admin') this.tocPdfApiRequests.admin++ || (this.tocPdfApiRequests.admin = 1);
    }

    static addMetaRequests(sigla: any) {
        this.metaRequests[sigla]++ || (this.metaRequests[sigla] = 1);
        if (sigla != 'admin') this.metaRequests.admin++ || (this.metaRequests.admin = 1);
    }

    static addMetaAuthRequests(sigla: any) {
        this.metaAuthRequests[sigla]++ || (this.metaAuthRequests[sigla] = 1);
        if (sigla != 'admin') this.metaAuthRequests.admin++ || (this.metaAuthRequests.admin = 1);
    }

    static addTocThumbnailRemoves() {
        this.tocThumbnailRemoves++;
    }

    static addCoverRemoves() {
        this.coverRemoves++;
    }

    static addMetaRemoves() {
        this.metaRemoves++;
    }

    static addMetaAuthRemoves() {
        this.metaAuthRemoves++;
    }

    static addMetaFetches(sigla: any) {
        this.metaFetches[sigla]++ || (this.metaFetches[sigla] = 1);
        if (sigla != 'admin') this.metaFetches.admin++ || (this.metaFetches.admin = 1);
    }

    static addMetaAuthFetches(sigla: any) {
        this.metaAuthFetches[sigla]++ || (this.metaAuthFetches[sigla] = 1);
        if (sigla != 'admin') this.metaAuthFetches.admin++ || (this.metaAuthFetches.admin = 1);
    }

    static addTimeoutCount(sigla: any) {
        this.timeoutCount[sigla]++ || (this.timeoutCount[sigla] = 1);
        if (sigla != 'admin') this.timeoutCount.admin++ || (this.timeoutCount.admin = 1);
    }

    static addCoverNotfound(sigla: any) {
        this.coverNotfound[sigla]++ || (this.coverNotfound[sigla] = 1);
        if (sigla != 'admin') this.coverNotfound.admin++ || (this.coverNotfound.admin = 1);
    }

    static addTocThumbnailNotfound(sigla: any) {
        this.tocThumbnailNotfound[sigla]++ || (this.tocThumbnailNotfound[sigla] = 1);
        if (sigla != 'admin') this.tocThumbnailNotfound.admin++ || (this.tocThumbnailNotfound.admin = 1);
    }

    static addTocPdfNotfound(sigla: any) {
        this.tocPdfNotfound[sigla]++ || (this.tocPdfNotfound[sigla] = 1);
        if (sigla != 'admin') this.tocPdfNotfound.admin++ || (this.tocPdfNotfound.admin = 1);
    }

    static addCoverFetches(sigla: any) {
        this.coverFetches[sigla]++ || (this.coverFetches[sigla] = 1);
        if (sigla != 'admin') this.coverFetches.admin++ || (this.coverFetches.admin = 1);
    }

    static addTocThumbnailFetches(sigla: any) {
        this.tocThumbnailFetches[sigla]++ || (this.tocThumbnailFetches[sigla] = 1);
        if (sigla != 'admin') this.tocThumbnailFetches.admin++ || (this.tocThumbnailFetches.admin = 1);
    }

    //specialne
    static addEtagStatisticByEtagPrefix(etagPrefix: string, sigla: any) {
        if (etagPrefix === 'file') {
            this.addEtagFileMatch(sigla);
        } else if (etagPrefix === 'tocp') {
            this.addEtagTocPdfMatch(sigla);
        } else if (etagPrefix === 'toct') {
            this.addEtagTocThumbMatch(sigla);
        } else {
            this.addEtagCoverMatch(sigla);
        }
    }

    static getStatisticsBySigla(s: any, sigla: number) {

        var stats = <Stats>{};

        stats.uptime = this.uptime();
        stats.etag_match = this.etagCoverMatch[sigla] || 0;
        stats.etag_toc_pdf_match = this.etagTocPdfMatch[sigla] || 0;
        stats.etag_toc_thumbnail_match = this.etagTocThumbMatch[sigla] || 0;
        stats.etag_file_match = this.etagFileMatch[sigla] || 0;
        stats.file_requests = this.fileRequests[sigla] || 0;
        stats.file_master_requests = this.fileMasterRequests[sigla] || 0;
        stats.timeout_count = this.timeoutCount[sigla] || 0;
        stats.meta_requests = this.metaRequests[sigla] || 0;
        stats.meta_fetches = this.metaFetches[sigla] || 0;
        stats.meta_auth_requests = this.metaAuthRequests[sigla] || 0;
        stats.meta_auth_fetches = this.metaAuthFetches[sigla] || 0;
        stats.cover_requests = this.coverRequests[sigla] || 0;
        stats.cover_api_requests = this.coverApiRequests[sigla] || 0;
        stats.cover_fetches = this.coverFetches[sigla] || 0;
        stats.cover_notfound = this.coverNotfound[sigla] || 0;
        stats.toc_thumbnail_requests = this.tocThumbnailRequests[sigla] || 0;
        stats.toc_thumbnail_api_requests = this.tocThumbnailApiRequests[sigla] || 0;
        stats.toc_thumbnail_fetches = this.tocThumbnailFetches[sigla] || 0;
        stats.toc_thumbnail_notfound = this.tocThumbnailNotfound[sigla] || 0;
        stats.toc_pdf_requests = this.tocPdfRequests[sigla] || 0;
        stats.toc_pdf_api_requests = this.tocPdfApiRequests[sigla] || 0;
        stats.toc_pdf_notfound = this.tocPdfNotfound[sigla] || 0;
        stats.meta_removes = this.metaRemoves;
        stats.cover_removes = this.coverRemoves;
        stats.toc_thumbnail_removes = this.tocThumbnailRemoves;

        s.db.collection(metaCollection).count(function(err, metaCount) {
            s.db.collection(metaAuthCollection).count(function(err, metaAuthCount) {
                s.db.collection('cover').count(function(err, coverCount) {
                    s.db.collection('logs').count(function(err, logsCount) {
                        stats.meta_count = metaCount;
                        stats.meta_auth_count = metaAuthCount;
                        stats.cover_count = coverCount;
                        stats.logs_count = logsCount;

                        if (s.query.save === 'true') {
                            stats.timeout_count = this.timeoutCount;
                            stats.meta_requests = this.metaRequests;
                            stats.meta_fetches = this.metaFetches;
                            stats.meta_auth_requests = this.metaAuthRequests;
                            stats.meta_auth_fetches = this.metaAuthFetches;
                            stats.cover_requests = this.coverRequests;
                            stats.cover_api_requests = this.coverApiRequests;
                            stats.cover_fetches = this.coverFetches;
                            stats.cover_notfound = this.coverNotfound;
                            stats.toc_thumbnail_requests = this.tocThumbnailRequests;
                            stats.toc_thumbnail_api_requests = this.tocThumbnailApiRequests;
                            stats.toc_thumbnail_fetches = this.tocThumbnailFetches;
                            stats.toc_thumbnail_notfound = this.tocThumbnailNotfound;
                            stats.toc_pdf_requests = this.tocPdfRequests;
                            stats.toc_pdf_api_requests = this.tocPdfApiRequests;
                            stats.toc_pdf_notfound = this.tocPdfNotfound;
                            stats.file_master_requests = this.fileMasterRequests;
                            stats.ip = s.remoteIP;
                            stats.timestamp = s.timestamp;
                            s.db.collection('stat').insert(stats, { w: 0 });
                        }

                        s.response.writeHead(200);
                        s.response.end(JSON.stringify(stats, null, ' '));
                    });
                });
            });
        });
    }

    static clearData() {
        this.timeoutCount = {};
        this.etagCoverMatch = {};
        this.etagTocPdfMatch = {};
        this.etagTocThumbMatch = {};
        this.etagFileMatch = {};
        this.fileRequests = {};
        this.fileOrigRequests = {};
        this.metaRequests = {};
        this.metaFetches = {};
        this.metaRemoves = 0;
        this.metaAuthRequests = {};
        this.metaAuthFetches = {};
        this.metaAuthRemoves = 0;
        this.coverRequests = {};
        this.coverApiRequests = {};
        this.coverFetches = {};
        this.coverNotfound = {};
        this.coverRemoves = 0;
        this.tocThumbnailRequests = {};
        this.tocThumbnailApiRequests = {};
        this.tocThumbnailFetches = {};
        this.tocThumbnailNotfound = {};
        this.tocThumbnailRemoves = 0;
        this.tocPdfRequests = {};
        this.tocPdfApiRequests = {};
        this.tocPdfNotfound = {};
    }

    private static uptime() {
        var now: any = new Date();
        var uptime: any = Math.floor((now.getTime() - this.dateStartup.getTime()) / 1000);

        var sec: any = uptime % 60;
        uptime -= sec;
        uptime /= 60;
        var min: any = uptime % 60;
        uptime -= min;
        uptime /= 60;
        var hour: any = uptime % 24;
        uptime -= hour;
        uptime /= 24;

        now.setHours(hour, min, sec);
        var time: any = now.toString().split(' ')[4];

        // 00:02:51 up 0 days, 2013-12-06T08:35:21.962Z
        return time + ' up ' + uptime + ' days, ' + this.dateStartup.toISOString()
    }
}



// ====================== PERMISSIONS.TS ===================

class Permissions {

    static referers: any = {}; // povolene referer hlavicky
    static perms = {}; // povolene ip adresy

    static addPerm(s: Server) {
        s.response.writeHead(200);
        var newPerm: any = {};

        if (s.remoteIP === ipBackend || s.remoteIP === '127.0.0.1' || s.remoteIP === '::1' || s.remoteIP === '::ffff:127.0.0.1') {
            //testLog
            if (s.query.ref)
                newPerm = { ref: s.query.ref, sigla: s.query.sigla };
            else if (s.query.ip)
                newPerm = { ip: s.query.ip, sigla: s.query.sigla };
            // add permission if not exists
            s.db.collection('perms').find(newPerm).count(function(err, permCount) {
                if (permCount == 0) s.db.collection('perms').insert(newPerm, { w: 0 }, function(err, result) {
                    Permissions.getPerms(s.db);
                });
            });
            s.response.write(JSON.stringify(Permissions.perms, null, ' ') + '\n\n');
            s.response.write(JSON.stringify(Permissions.referers, null, ' ') + '\n\n');
        }
        s.response.end('ok');
    }

    static getPerms(db, clear = false) {
        if (clear === true) {
            Permissions.perms = {}; Permissions.referers = {};
        }
        Permissions.perms['127.0.0.1'] = 'admin';
        Permissions.perms['::1'] = 'admin';
        Permissions.perms['::ffff:127.0.0.1'] = 'admin';

        db.collection('perms').find().toArray(function(err, items) {
            for (var i: any = 0; i < items.length; i++) {
                var item: any = items[i];
                if (item.ref) {
                    console.log('referer: ' + item.ref);
                    Permissions.referers[item.ref.toLowerCase()] = item.sigla.trim();
                }
                if (item.ip) {
                    console.log('ip: ' + item.ip);
                    Permissions.setSiglaForIp('::ffff:' + item.ip.trim(), item.sigla.trim());
                }
            }
        });
    }

    static reloadPerms(s: Server) {
        Permissions.getPerms(s.db);
        s.response.writeHead(200);
        if (Permissions.perms[s.remoteIP] || s.remoteIP === '127.0.0.1' || s.remoteIP === '::1' || s.remoteIP === '::ffff:127.0.0.1') {
            if (s.query.vymaz === 'true') {
                // for tests and debug only, not public url parameter
                Permissions.perms = {};
                Permissions.referers = {};
                etags = {};
                Statistics.clearData();
                // getPerms(db);
            }
            s.response.write(JSON.stringify(Permissions.perms, null, ' ') + '\n\n');
            s.response.write(JSON.stringify(Permissions.referers, null, ' ') + '\n\n');
        }
        s.response.end('ok');
    }

    static getSiglaForIp(ip: any) {
        return Permissions.perms[ip];
    }

    static setSiglaForIp(ip: any, sigla: any) {
        Permissions.perms[ip] = sigla;
    }

    static refererValid(referer, ip, encsigla) {
        // console.log('revererValid:' + referer);

        if (encsigla) {
            console.log(encsigla);
            var sigla: any = Helpers.decrypt(encsigla);
            if (regexpSigla.test(sigla)) return sigla;
        }

        var sigla = Permissions.getSiglaForIp(ip);
        if (sigla) return sigla;

        if (!referer) return false;

        referer = referer.toLowerCase();
        var refererOrig: any = referer;
        referer = referer.split('?')[0];
        var index: any = referer.indexOf('/', 8);
        if (index > 0) referer = referer.slice(0, index);

        if (Permissions.referers[referer]) { // 1. segment URL
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }

        var index2nd: any = refererOrig.indexOf('/', index + 1);
        if (index2nd > 0) referer = refererOrig.slice(0, index2nd);

        if (Permissions.referers[referer]) { // 1.+2. segment URL
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }

        if (Permissions.referers[refererOrig]) { // presna shoda URL
            return Permissions.referers[refererOrig];
        }

        //shoda adresy reverzne (porovnani vsech registrovanych adres s aktualnim referer)
        for (var property in Permissions.referers) {
            if (Permissions.referers.hasOwnProperty(property)) {
                if (refererOrig.indexOf(property) !== -1) {
                    return Permissions.referers[property];
                }
            }
        }

        console.log('referer ' + referer + ' is not valid (' + refererOrig + ')');
        return false;
    }

    static ipValid(xreferer, ip, sigla) {
        //console.log('ipValid:' + ip);
        var tmp: any = Permissions.refererValid(xreferer, ip, null);

        if (!tmp) return false;
        if (tmp === 'sigla') {
            return sigla;
        } else {
            return tmp;
        }
    }

}



// ====================== HELPER.TS ===================

class Helpers {

    static replaceUrl(meta: any, simple: any, bibinfo?: any) {

        // zjednoduseny vystup metadata API
        if (simple !== undefined) {
            var simpleItemsList = ['cover_thumbnail_url', 'cover_icon_url', 'cover_medium_url', 'cover_preview510_url', 'toc_pdf_url', 'toc_thumbnail_url', 'backlink_url', 'book_id'];
            for (var property in meta) {
                if (meta.hasOwnProperty(property)) {
                    if (simpleItemsList.indexOf(property) === -1) {
                        delete meta[property];
                    }
                }
            }
        }

        if (meta.cover_thumbnail_url) {
            meta.cover_thumbnail_url = meta.cover_thumbnail_url.replace(urlMain, urlReplace);
        }
        if (meta.cover_medium_url) {
            meta.cover_medium_url = meta.cover_medium_url.replace(urlMain, urlReplace);
        }
        if (meta.cover_preview510_url) {
            meta.cover_preview510_url = meta.cover_preview510_url.replace(urlMain, urlReplace);
        }
        if (meta.cover_icon_url) {
            meta.cover_icon_url = meta.cover_icon_url.replace(urlMain, urlReplace);
        }
        if (meta.toc_text_url) {
            delete meta.toc_text_url;
        }
        if (meta.toc_thumbnail_url) {
            meta.toc_thumbnail_url = meta.toc_thumbnail_url.replace(urlMain, urlReplace);
        }
        if (meta.toc_pdf_url && meta.toc_pdf_url.indexOf('/view') === -1) {
            meta.toc_pdf_url = meta.toc_pdf_url.replace(urlMain, urlReplace);
        }
        if (bibinfo) {
            meta.bibinfo = bibinfo;
        }
        if (meta.part_ean_standalone != null) {
            delete meta.part_ean_standalone;
            delete meta.part_nbn_standalone;
            delete meta.part_ismn_standalone;
            delete meta.part_oclc_standalone;
        }

        meta['mediaFileUrl'] = 'https://' + urlReplace + '/storage/iso/' + meta['mediaFileId'] + '.iso';
        meta['marcxmlFileUrl'] = 'https://' + urlReplace + '/storage/marcxml/' + meta['_id'] + '.xml';
        meta['modsFileUrl'] = 'https://' + urlReplace + '/storage/mods/' + meta['_id'] + '.xml';
        meta['metaFileUrl'] = 'https://' + urlReplace + '/storage/meta/' + meta['_id'] + '.xml';

        return meta;
    }


    static getUrlByType(metadata: any, type?: any) {
        if (!metadata) return null;
        var url: any = null;

        switch (type) {
            case 'thumbnail':
                url = metadata.cover_thumbnail_url;
                break;
            case 'icon':
                url = metadata.cover_icon_url;
                break;
            case 'preview510':
                url = metadata.cover_preview510_url;
                break;
            case 'toc_thumbnail':
                url = metadata.toc_thumbnail_url;
                if (!url) return null; // toc_thumbnail nesmi v pripade neexistence vratit cover_medium_url
                break;
            default:
                url = metadata.cover_medium_url;
        }

        url = url || metadata.cover_medium_url;
        if (!url) return null;
        url = url.slice(url.indexOf('/', 8));
        console.log((type == 'toc_thumbnail' ? 'toc thumbnail' : 'cover') + ' url: ' + url);

        return url;
    }

    /**
     * Normalizace objektu bibinfo.
     * Seradi polozky v objektu bibinfo do zadaneho poradi; isbn, oclc, nbn, ismn
     * Pouziva se zejmena pro spravne parovani odpovedi BE na /api/books/?multi dotaz FE, kdy poradi polozek v dotazu a odpovedi neni stejny.
     *
     * param bibinfo Objekt bibinfo
     * prarm asObject true=vrati serazeny objekt, false=serializuje na string
     */
    static getSortedBibinfo(bibIn: any, asObject?: any) {
        var bibOut: any = {};
        var bibIn: any = bibIn || {};

        if (bibIn.isbn) bibOut.isbn = bibIn.isbn;
        if (bibIn.ismn) bibOut.ismn = bibIn.ismn;
        if (bibIn.oclc) bibOut.oclc = bibIn.oclc;
        if (bibIn.nbn) bibOut.nbn = bibIn.nbn;
        return asObject === true ? bibOut : JSON.stringify(bibOut);
    }

    static encrypt(plain) {
        var key: any = crypto.createHash('sha256').update(cryptoPasskey).digest('base64');
        var cipher: any = crypto.createCipher('aes-256-cbc', key);
        var encypted: any = cipher.update(plain, 'utf8', 'base64');
        encypted += cipher.final('base64');
        return encypted;
    }

    static decrypt(encrypted) {
        var key: any = crypto.createHash('sha256').update(cryptoPasskey).digest('base64');
        var decipher: any = crypto.createDecipher('aes-256-cbc', key);
        var plain: any = decipher.update(encrypted, 'base64', 'utf8');
        plain += decipher.final('utf8');
        return plain;
    }

    /**
     * Proveruje identifikatory part_*
     */
    static partValidation(p) {
        if (!(
            (p.part_year && p.part_no) || (p.part_volume && p.part_no) ||
            (!p.part_year && !p.part_volume && (p.part_no || p.part_name)) ||
            ((p.part_year || p.part_volume) && !p.part_no) || // pro rocenky
            (!p.part_year && !p.part_volume && !p.part_no && !p.part_name)
            )) {
            console.log('part params combination not valid');
            return false;
        }
        if (p.length !== undefined) {
            console.log('object expected, array found');
            return false;
        }
        for (var prop in p) {
            if (p[prop].match(/<(.*)>/)) {
                console.log('param "' + prop + '":"' + p[prop] + '" contains illegal characters');
                return false;
            }
        }
        return true;
    }

    static bin2string(array){
        var result = "";
        for (var i = 0; i < array.length; ++i) {
            result+= (String.fromCharCode(array[i]));
        }
        return result;
    }

}


// ====================== CD ARCHA VERSION 1 ===================

var server = function(req, response, db) {
    var a = new Server(req, response, db);
    a.go(a);
}

interface Result {
    bib: any;
    sel: any;
}

interface ItemInfo {
    item: any;
    ean13: any;
    nbn: any;
    ismn: any;
    oclc: any;
    part_year: any;
    part_volume: any;
    part_no: any;
    part_name: any;
    part_root: any;
    part_ean13_standalone: any;
    part_nbn_standalone: any;
    part_ismn_standalone: any;
    part_oclc_standalone: any;
}

class Server {
    req: any;
    response: any;
    db: any;

    requrl: any;
    query: any;
    date: any;
    timestamp: any;
    now: any;
    etag: any;
    referer: any;
    remoteIP: any;
    encsigla: any;

    sigla: any; //pridane-------------------------------------------------------------------------------------

    static placeholderData: any = [
        0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x21, 0xF9, 0x04, 0x01, 0x0A, 0x00, 0x01, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x4C, 0x01, 0x00, 0x3B
    ];
    static placeholder: any = new Buffer(Server.placeholderData);

    constructor(req: any, response: any, db: any) {
        this.requrl = req.url;
        testLog("43", "CD ARCHA v1 starting...");
        testLog("92", "Request url:" + this.requrl);
        // console.log(req.connection.remoteAddress);
        // console.log(requrl);
        this.query = URL_lib.parse(this.requrl, true).query;
        // console.log('query: ' + JSON.stringify(query));
        this.date = new Date();
        this.timestamp = this.date.toISOString();
        this.now = this.date.getTime();
        // console.log(timestamp);
        // console.log('HEAENCRYPTD: ' + JSON.stringify(req.headers));
        this.etag = req.headers['if-none-match'] || req.headers['Etag'];
        this.referer = req.headers['referer'];
        this.remoteIP = req.connection.remoteAddress;
        this.encsigla = this.query.encsigla;
        // console.log(etags);
        // console.log('index: ' + requrl.indexOf(urlMetadata));
        this.req = req;
        this.response = response;
        this.db = db;

        this.sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
    }


    go(s: Server) {
        /**
         * ETAG MATCH
         **/
        if (etags[this.etag] !== undefined) {

            testLog("43", "[ETAG MATCH]");

            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            var etagPrefix: any = this.etag.substring(0, 4);

            Statistics.addEtagStatisticByEtagPrefix(etagPrefix, sigla);

            this.response.statusCode = 304;
            this.response.end();
        }

        /**
         * STATICKE SOUBORY
         **/
        // http://cache.obalkyknih.cz/favicon.ico
        else if (this.requrl === '/favicon.ico' || this.requrl === '/cdarcha_klient/update-info.xml')
        {
            testLog("41", "[STATICKE SUBORY] Sigla:" + sigla);

            Statistics.addFileRequests(sigla);
            testLog("41", "-> fileRequests[sigla]:" + Statistics.fileRequests[sigla]);

            if (this.requrl.substring(this.requrl.length - 4) === '.ico')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'image/x-icon' });
            if (this.requrl.substring(this.requrl.length - 2) === '.js')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'text/javascript' });
            else
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl) });

            etags['file-' + md5(this.requrl)] = null;
            var readStream: any = fileSystem.createReadStream('static' + this.requrl);
            readStream.pipe(this.response);
        }

        /**
         * LET'S ENCRYPT CHALLENGE
         **/
        else if (this.requrl.substr(0,12) === '/.well-known') {
            testLog("41", "[LETS ENCRYPT]");

            // cache1 ziada o obnovu certifikatu
            // umozni stiahutie suboru v adresary .well-known zo svojho suboroveho systemu
            if (urlReplace == 'cache.obalkyknih.cz') {
                var fileName: any = this.requrl.substr(13);
                if (fileSystem.existsSync(fileName)) {
                    var readStream: any = fileSystem.createReadStream(fileName);
                    readStream.pipe(this.response);
                } else {
                    s.send404IfNotValue(false);
                }
            }

            // cache2 neziada o obnovu = nema ani adresar .well-known (neni tu curl s SNI); ten je na cache1
            // proposle ziadost o stiahnutie suboru v adresary .well-known na cache1
            else {
                var options = {
                    hostname: 'cache.obalkyknih.cz',
                    path: this.requrl
                };
                var reqMasterData = http.request(options, function (res) {
                    if (res.statusCode !== 200) {
                        s.send404IfNotValue(false);
                        return;
                    }
                    var data = [];
                    res.on('error', function (e) {
                        console.log(e);
                    });
                    res.on('data', function (chunk) {
                        s.response.write(chunk);
                    });
                    res.on('end', function () {
                        s.response.end();
                    });
                });
                reqMasterData.setTimeout(timeout, function () {
                    s.req.abort();
                    s.response.end();
                });
                reqMasterData.on('error', function (err) {
                    if (err.code === "ECONNRESET") {
                        console.log('file lets encrypt timeout occurs');
                    }
                });
                reqMasterData.end();
            }
        }


        /**
         * API IMPORT
         **/
        else if (this.requrl.indexOf(apiImport) > 0) {
            testLog("41", "[ API IMPORT ]");

            if (this.req.method == 'POST') {
                testLog("41", "POST");
                var boundary: string = multipart.getBoundary(this.req.headers['content-type']);

                var body: string = '';
                this.req.on('data', function(chunk) {
                    body += chunk;
                });
                this.req.on('end', function() {
                    testLog("41", "[ CHUNK FINISHED ]");
                    body = new Buffer(body,'utf-8');
                    var res: number = 0;
                    var parts = multipart.Parse(body, boundary);

                    var bibinfo = <Bibdata>{};
                    var metaxml: string;
                    var marcxml: string;
                    var mods: string;

                    for(var i=0; i<parts.length; i++) {
                        var key = parts[i]['filename'];
                        var value = parts[i]['data'].toString('utf8');
                        console.log(key);
                        if (key=='isbn') key = 'ean13';
                        if (key=='meta.xml') {
                            metaxml = value;
                            continue;
                        }
                        if (key=='marcxml.xml') {
                            marcxml = value;
                            continue;
                        }
                        if (key=='mods.xml') {
                            mods = value;
                            continue;
                        }
                        bibinfo[key] = value;
                    }
                    bibinfo['dtCreated'] = bibinfo['dtLastUpdate'] = new Date();

                    Bibinfo.search(s, bibinfo, function(media) {

                        // nenasiel sa zaznam, vytvarame
                        if (!media) {
                            Bibinfo.insert(s, bibinfo, function(res) {
                                if (!res) {
                                    s.send404IfNotValue(res, 'Bibinfo insert failed');
                                } else {
                                    if (metaxml.length) fileSystem.writeFile(storageFolder + '/meta/' + res.ops[0]._id + '.xml', metaxml);
                                    if (marcxml.length) fileSystem.writeFile(storageFolder + '/marcxml/' + res.ops[0]._id + '.xml', marcxml);
                                    if (mods.length) fileSystem.writeFile(storageFolder + '/mods/' + res.ops[0]._id + '.xml', mods);
                                    console.log('[ FINISHED ] ' + res.ops[0]._id);
                                    s.response.writeHead(200);
                                    s.response.end(res.ops[0]._id.toString('hex'));
                                }
                            });
                        }

                        // medium uz existuje, posleme identifikator
                        else {
                            if (metaxml.length) fileSystem.writeFile(storageFolder + '/meta/' + media._id + '.xml', metaxml);
                            if (marcxml.length) fileSystem.writeFile(storageFolder + '/marcxml/' + media._id + '.xml', marcxml);
                            if (mods.length) fileSystem.writeFile(storageFolder + '/mods/' + media._id + '.xml', mods);
                            console.log('[ FINISHED ] ' + media._id);
                            s.response.writeHead(200);
                            s.response.end(media._id.toString('hex'));
                        }
                    });
                });
            } else {
                s.send404IfNotValue(false, 'POST method required');
            }
        }// API IMPORT


        /**
         * ISO FILE UPLOAD
         **/
        else if (this.requrl.indexOf(urlUpload) > 0) {
            testLog("41", "[ RECEIVING CHUNK ]");

            if (this.req.method == 'POST') {
                testLog("41", "POST");

                var mediaId: string = this.req.headers['x-cdarcha-mediaid'];
                var mediaChecksum: string = this.req.headers['x-cdarcha-checksum'];
                var fileType: string = this.req.headers['x-cdarcha-filetype'] || 'iso';
                var quickId: string = this.req.headers['x-cdarcha-quickid'] || '';
                var mediaSize: number = parseInt(this.req.headers['x-cdarcha-mediasize']) || 0;
                var mediaReadProblem: number = parseInt(this.req.headers['x-cdarcha-mediareadproblem']) || 0;
                var forcedUpload: number = parseInt(this.req.headers['x-cdarcha-forcedupload']) || 0;

                // mediaid a checksum je povinne
                if (!mediaId || !mediaChecksum) {
                    s.response.writeHead(404);
                    s.response.end('mediaid or checksum missing');
                    return;
                }

                var hash = crypto.createHash('sha1');
                hash.setEncoding('hex');

                var writeStream = fileSystem.createWriteStream(tmpFolder + '/iso/' + mediaId + '.iso', {flags: 'w'});
                this.req.pipe(writeStream, { end: false });
                this.req.pipe(hash);

                this.req.on('end', function() {
                    testLog("41", "[ CHUNK FINISHED ]");
                    writeStream.end();
                    hash.end();
                    var checksum: string = hash.read();
                    console.log('%%%%%%%');
                    console.log(mediaChecksum);
                    console.log(checksum);
                    console.log('%%%%%%%');

                    var success: bool = (mediaChecksum == checksum);

                    // vyhledame soubor se stejnym kontrolnim souctem v DB
                    s.db.collection(filesCollection).findOne({ "checkSum": checksum }, function(err, item) {
                        var mediaFile: any = {
                            'type': 'media',
                            'fileType': fileType,
                            'checkSum': checksum,
                            'quickId': quickId,
                            'mediaSize': mediaSize,
                            'mediaReadProblem': mediaReadProblem,
                            'forcedUpload': forcedUpload,
                            'dtCreated': new Date(),
                            'dtLastUpdate': new Date()
                        };

                        if (item) {

                            // zaznam existuje, svazeme s media zaznamem
                            s.db.collection(metaCollection).update({ _id: new mongo.ObjectID(mediaId)}, { $set: { 'mediaFileId': item._id, 'dtLastUpdate': new Date() }});
                            // aktualizujeme
                            delete mediaFile['dtCreated'];
                            s.db.collection(filesCollection).update({ _id: new mongo.ObjectID(item._id)}, { $set: mediaFile});
                            // uklidime docasny soubor
                            fileSystem.copyFileSync(tmpFolder + '/iso/' + mediaId + '.iso', storageFolder + '/iso/' + item._id + '.' + fileType);
                            fileSystem.unlink(tmpFolder + '/iso/' + mediaId + '.iso');
                        } else {
                            if (success) {

                                // pokud kontrolni soucet sedi zalozime zaznam uploadovaneho zaznamu
                                s.db.collection(filesCollection).insert(mediaFile, { w: 1 }, function(err, result) {
                                    var mediaFileId: string = result.ops[0]._id;
                                    // svazeme se zaznamem media
                                    s.db.collection(metaCollection).update({ _id: new mongo.ObjectID(mediaId)}, { $set: {'mediaFileId': mediaFileId }});
                                    // presuneme do adresare uloziste
                                    fileSystem.copyFileSync(tmpFolder + '/iso/' + mediaId + '.iso', storageFolder + '/iso/' + mediaFileId + '.' + fileType);
                                    fileSystem.unlink(tmpFolder + '/iso/' + mediaId + '.iso');
                                });

                            } else {

                                // kontrolni soucet nesedi, upload se nepoved, uklidime docasny soubor
                                fileSystem.unlink(tmpFolder + '/iso/' + mediaId + '.iso');

                            }
                        }
                    });

                    s.response.writeHead(200);
                    s.response.end('ok');
                });
            } else {
                this.send404IfNotValue(false, 'POST method required');
            }
        }// ISO FILE UPLOAD


        /**
         * API GET HASH
         **/
        else if (this.requrl.indexOf(apiChecksum) > 0) {
            testLog("41", "[ API CHECKSUM ]");

            if (!this.query.mediaid) {
                s.response.writeHead(404);
                s.response.end(JSON.stringify({ "status": "mediaid missing" }));
                return;
            }

            this.db.collection(metaCollection).findOne({ _id: new mongo.ObjectID(this.query.mediaid) }, function(err, item) {
                if (err) {
                    s.response.writeHead(404);
                    s.response.end(JSON.stringify({ "status": "error", "msg": err }));
                    return;
                }
                if (!item) {
                    s.response.writeHead(200);
                    s.response.end(JSON.stringify({ "status": "not found" }));
                    return;
                }

                s.db.collection(filesCollection).findOne({ _id: new mongo.ObjectID(item.mediaFileId) }, function(err, item) {
                    if (err) {
                        s.response.writeHead(404);
                        s.response.end(JSON.stringify({ "status": "error", "msg": err }));
                        return;
                    }
                    if (!item) {
                        s.response.writeHead(200);
                        s.response.end(JSON.stringify({ "status": "not found" }));
                        return;
                    }

                    if (!item.checkSum) {
                        s.response.writeHead(200);
                        s.response.end(JSON.stringify({ "status": "not prepared" }));
                    } else {
                        s.response.writeHead(200);
                        s.response.end(JSON.stringify({ "status": "ok", "hash": item.checkSum }));
                    }
                });
            });
        }// API GET HASH


        /**
         * API GET MEDIA
         **/
        else if (this.requrl.indexOf(apiGetMedia) > 0) {
            testLog("41", "[ API GET MEDIA ]");

            if (!this.query.quickid) {
                s.response.writeHead(404);
                s.response.end(JSON.stringify({ "status": "quickid missing" }));
                return;
            }

            s.db.collection(filesCollection).findOne({ 'quickId': this.query.quickid }, function(err, item) {
                if (err) {
                    s.response.writeHead(404);
                    s.response.end(JSON.stringify({ "status": "error", "msg": err }));
                    return;
                }
                if (!item) {
                    s.response.writeHead(200);
                    s.response.end(JSON.stringify({ "status": "not found" }));
                    return;
                }

                s.db.collection(metaCollection).findOne({ 'mediaFileId': item._id }, function(err, media) {
                    if (err) {
                        s.response.writeHead(404);
                        s.response.end(JSON.stringify({ "status": "error", "msg": err }));
                        return;
                    }
                    if (!media) {
                        s.response.writeHead(200);
                        s.response.end(JSON.stringify({ "status": "not found" }));
                        return;
                    }

                    s.response.writeHead(200);
                    s.response.end(JSON.stringify({
                        "dtUpdate": item.dtLastUpdate.getDate() + '.' + (item.dtLastUpdate.getMonth()+1) + '.' + item.dtLastUpdate.getFullYear(),
                        "title": media.title,
                        "authors": media.authors,
                        "year": media.year,
                        "size": item.mediaSize,
                        "mediaReadProblem": item.mediaReadProblem
                    }));
                });
            });
        }// API GET MEDIA


        /**
         * FILE COVER
         **/
        // http://cache.obalkyknih.cz/file/cover/1143894/medium
        else if (this.requrl.indexOf(urlCoverFile) > 0) {
            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            testLog("41", "[FILE COVER] Sigla:" + sigla);

            if (!this.isRequestValid(sigla, true)) {
                console.log('>>> referer not valid: ' + this.referer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
                return;
            }

            // cover request
            Statistics.addCoverRequests(sigla);

            testLog("44", "-> requrl.split('?')[0]:" + this.requrl.split('?')[0]);
            this.cover(this, this.requrl.split('?')[0]);
        }


        /**
         * FILE MASTER
         **/
        // http://cache1.obalkyknih.cz/file/master/1449055
        else if ((this.requrl.indexOf(urlMasterFile)) > 0) {
            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla)

            if (!this.isRequestValid(sigla, true)) {
                console.log('>>> referer not valid: ' + this.referer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
                return;
            }

            Statistics.addFileMasterRequests(sigla);

            // master request
            var tmpUri = this.requrl.split('?')[0];
            var uriSegments = tmpUri.split('/');

            if (isNaN(uriSegments[3])) {
                s.send404IfNotValue(false, 'Wrong request');
                return;
            }
            tmpUri = '/file/cover/' + uriSegments[3] + '/master';

            testLog("41", "-> FILE MASTER request:" + urlMain + '/' + tmpUri);

            var options = {
                hostname: urlMain,
                path: tmpUri
            };

            var reqMasterData = http.request(options, function(res) {
                testLog("41", "-> fileOrigRequests[sigla]:" + Statistics.fileMasterRequests[sigla]);

                if (res.statusCode !== 200) {
                    s.send404IfNotValue(false);
                    return;
                }

                var data = [];
                res.on('error', function(e) {
                    console.log(e);
                });

                res.on('data', function(chunk) {
                    s.response.write(chunk);
                }); //.pipe(response);

                res.on('end', function() {
                    s.response.end();
                });
            });

            reqMasterData.setTimeout(timeout, function() {
                s.req.abort();
                s.response.end()
            });

            reqMasterData.on('error', function(err) {
                if (err.code === "ECONNRESET") {
                    console.log('file master timeout occurs');
                }
            });

            reqMasterData.end();
        }

        /**
         * FILE TOC (thumbnail + pdf)
         **/
        // http://cache.obalkyknih.cz/file/toc/142444/thumbnail
        // http://cache.obalkyknih.cz/file/toc/142444/pdf
        else if ((this.requrl.indexOf(urlTocFile)) > 0) {
            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            testLog("41", "[FILE TOC] Sigla:" + sigla);

            if (!this.isRequestValid(sigla, true)) {
                console.log('>>> referer not valid: ' + this.referer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
                return;
            }

            var reqUrl: any = this.requrl.split('?')[0];

            testLog("41", "-> reqUrl:" + reqUrl);

            if ((reqUrl.indexOf(uriPartTocThumbnail)) > 0) {
                // TOC thumbnail request
                testLog("44", "->-> TOC thumbnail request");
                Statistics.addTocThumbnailRequests(sigla);
                this.cover(this, reqUrl);
            } else if ((reqUrl.indexOf(uriPartTocPdf)) > 0) {
                // TOC file request
                testLog("44", "->-> TOC pdf file request");
                Statistics.addTocPdfRequests(sigla);
                this.toc(this, reqUrl);
            }
        }

        /**
         * FILE STORAGE
         **/
        else if ((this.requrl.indexOf(urlStorage)) > 0) {
            //var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            testLog("41", "[FILE STORAGE] Sigla:" + sigla);

            //if (!this.isRequestValid(sigla, true)) {
            //    console.log('>>> referer not valid: ' + this.referer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
            //    return;
            //}

            var reqUrl: any = this.requrl.split('?')[0];
            var file: string = storageFolder + '/' + reqUrl.substring(urlStorage.length + 1);

            testLog("41", "-> reqUrl:" + reqUrl);

            if (fileSystem.existsSync(file)) {
                if ((this.requrl.indexOf('.iso')) > 0) {
                    s.response.writeHead(200, { 'Content-Type': 'application/iso' });
                } else {
                    s.response.writeHead(200, { 'Content-Type': 'text/xml' });
                }
                var readStream: any = fileSystem.createReadStream(file);
                readStream.pipe(this.response);
            } else {
                s.send404IfNotValue(null, 'No such file in storage.');
            }
        }

        /**
         * API COVER
         **/
        // http://cache.obalkyknih.cz/api/cover/?multi={"isbn":"1210-8480","nbn":"cnb000359017"}
        // http://cache.obalkyknih.cz/api/cover/?isbn=1210-8480
        else if ((this.requrl.indexOf(urlCoverApi)) > 0) {
            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla)
            var testEnvRequest: any = s.query.testenv || '';
            if (testEnvRequest=='XcDf2FvUP') sigla='Booga1';
            testLog("41", "[API COVER] Sigla:" + sigla);

            if (!this.isRequestValid(sigla, true, true)) {
                console.log('>>> referer not valid: ' + this.referer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
                return;
            }

            Statistics.addCoverApiRequests(sigla);

            var result = this.getResult();

            if (this.sendPlaceholderIfNotValue(result)) {
                return;
            }

            testLog("34", "-> db.collection(metaCollection).find(sel) : db.collection(" + metaCollection + ").find(" + result.sel + ")");
            this.db.collection(metaCollection).find(result.sel).toArray(function(err, items_raw) {

                if (!items_raw.length) {
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], true, false, false);
                    return;
                }

                // Projdi doposud ziskane vysledky z DB
                if (items_raw) {

                    var items: any = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;

                    var bibinfo: any = result.bib;
                    var found: any = false; // prvni shoda a dost

                    for (var i: number = 0; i < items.length; i++) {
                        var itemInfo = s.getItemInfoFromItem(items[i]);

                        /* Spolecne chovani BE a FE pri rozhodovani nad dotazy s vice parametry:
                         * Uplatnuje se priorita parametru v tomto poradi ISBN, OCLC, NBN, ISMN.
                         * Pokud mame 2 zaznamy, kde ISBN=1, OCLC=2, NBN=3 a ISBN=1, OCLC=2, NBN=4 a
                         * zeptame se na ISNB=1 dostaneme 1.zaznam, pokud se zeptame na OCLC=2 dostaneme
                         * taky 1.zaznam, pokud se zeptame na NBN=4 dostaneme 2.zaznam.
                         * Ale pokud se zeptame na kombinaci ISBN=1 + NBN=4 dostaneme 1.zaznam, protoze
                         * prioritni je ISBN a zhoda se nasla uz pri prvnim zaznamu, dale se nepokracuje.

                         * FE operuje s 2 zdroji: lokalni MongoDB a BE API
                         * Rozdil ve vysledku mezi odpovedi BE a FE muze nastat prave pri duplikovanych
                         * zaznamu z prikladu v predchozim odstavci. Pokud zaznam c.1 jeste nebude dotazen
                         * na FE a zeptame se na kombinaci ISBN=1 + NBN=4 dostaneme jako vysledek 2. zaznam.*/

                        if (itemInfo.item !== null && s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN, 3=UUID, 4=ISMN, 5=ISBN_OTHER
                            for (var j: number = 0; j <= 5; j++) {

                                var found: any = s.itemFound(itemInfo, bibinfo, j);

                                if (found) {
                                    var coverUrl: any = Helpers.getUrlByType(itemInfo.item, s.query.type);

                                    if (s.sendPlaceholderIfNotValue(coverUrl)) {
                                        return;
                                    } else {
                                        s.cover(s, coverUrl, true, false);
                                        return;
                                    }
                                }
                            }
                        }
                    }// for items

                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], true, false, false);
                    return;

                }// if items
            })
        }

        /**
         * API TOC THUMBNAIL
         **/
        // http://cache2.obalkyknih.cz/api/toc/thumbnail?multi={%22isbn%22:%221212-8570%22}
        // http://cache2.obalkyknih.cz/api/toc/thumbnail?isbn=1212-8570
        else if ((this.requrl.indexOf(urlTocApiThumbnail)) > 0) {
            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla)

            if (!this.isRequestValid(sigla, true, true)) {
                console.log('>>> referer not valid: ' + this.referer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
                return;
            }

            Statistics.addTocThumbnailApiRequests(sigla);

            var result = this.getResult();

            if (this.sendPlaceholderIfNotValue(result)) {
                return;
            }

            this.db.collection(metaCollection).find(result.sel).toArray(function(err, items_raw) {

                if (!items_raw.length) {
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, true, false);
                    return;
                }

                // Projdi doposud ziskane vysledky z DB
                if (items_raw) {

                    var items: any = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;

                    var bibinfo: any = result.bib;
                    var found: any = false; // prvni shoda a dost

                    for (var i = 0; i < items.length; i++) {
                        var itemInfo = s.getItemInfoFromItem(items[i]);

                        /* Blizsie info u API COVER */

                        if (itemInfo.item !== null && s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN, 3=UUID, 4=ISMN, 5=ISBN_OTHER
                            for (var j: any = 0; j <= 5; j++) {

                                var found: any = s.itemFound(itemInfo, bibinfo, j);

                                if (found) {
                                    var tocThumbnailUrl: any = Helpers.getUrlByType(itemInfo.item, 'toc_thumbnail');

                                    if (s.sendPlaceholderIfNotValue(tocThumbnailUrl)) {
                                        return;
                                    }

                                    //console.log(tocThumbnailUrl);
                                    s.cover(s, tocThumbnailUrl, false, true);
                                    return;
                                }
                            }
                        }
                    }// for items

                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, true, false);
                    return;

                }// if items
            });
        }

        /**
         * API TOC PDF
         **/
        // http://cache2.obalkyknih.cz/api/toc/pdf?multi={%22isbn%22:%221212-8570%22}
        // http://cache2.obalkyknih.cz/api/toc/pdf?isbn=1212-8570

        else if ((this.requrl.indexOf(urlTocApiPdf)) > 0) {
            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla)

            if (!this.isRequestValid(sigla, true, true)) {
                console.log('>>> referer not valid: ' + this.referer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
                return;
            }

            Statistics.addTocPdfApiRequests(sigla);

            var result = this.getResult();
            var ipv4: any = this.remoteIP;
            if (ipv4.indexOf('::ffff:')!==-1) ipv4 = ipv4.substring(7);
            if (this.send404IfNotValue(result, 'Unknown referer. You need to sign up at http://www.obalkyknih.cz and provide your catalog URL. Referer: ' + this.referer + '  IP: ' + ipv4)) {
                return;
            }

            this.db.collection(metaCollection).find(result.sel).toArray(function(err, items_raw) {

                if (!items_raw.length) {
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, false, true);
                    return;
                }

                // Projdi doposud ziskane vysledky z DB
                if (items_raw) {

                    var items: any = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;

                    var bibinfo: any = result.bib;
                    var found: any = false; // prvni shoda a dost

                    for (var i: number = 0; i < items.length; i++) {

                        var itemInfo = s.getItemInfoFromItem(items[i]);

                        /* Blizsie info u API COVER */

                        if (itemInfo.item !== null && s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN, 3=UUID, 4=ISMN, 5=ISBN_OTHER
                            for (var j: number = 0; j <= 5; j++) {

                                var found: any = s.itemFound(itemInfo, bibinfo, j);

                                if (found) {
                                    if (!itemInfo.item.toc_pdf_url) {
                                        s.send404IfNotValue(false);
                                        return;
                                    } else {
                                        s.toc(s, itemInfo.item.toc_pdf_url);
                                        return;
                                    }

                                }
                            }
                        }
                    }// for items

                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, false, true);
                    return;

                }// if items
            });
        }

        /**
         * METADATA
         **/
        // http://cache1.obalkyknih.cz/api/books/?multi=[{%22isbn%22:%229788376663103%22},{%22isbn%22:%229788376663203%22}]&sigla=CBA001&pretty=1
        else if ((this.requrl.indexOf(urlMetadata)) > 0) {
            //var sigla: any = Permissions.ipValid(this.xreferer, this.remoteIP, this.query.sigla);
            var fetcha: any = []; // pole objektu s parametry {isbn:xxx},{isbn:yyy,nbn:zzz}

            //if (!this.isRequestValid(sigla, true, true)) {
            //    console.log('>>> xreferer or ip not valid: ' + this.xreferer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
            //    return;
            //}

            //Statistics.addMetaRequests(sigla);

            var ean: any = '';
            var isbns: any = []; // temporary
            var isbna: any = []; // pole s ISBN identifikatory
            var nbns: any = []; // temporary
            var nbna: any = []; // pole s NBN identifikatory
            var ismns: any = []; // temporary
            var ismna: any = []; // pole s ISMN identifikatory
            var oclcs: any = []; // temporary
            var oclca: any = []; // pole s OCLC identifikatory
            var uuida: any = []; // pole s UUID identifikatory (Kramerius)
            var multis: any = []; // temporary
            var resSimple: any = this.query.simple;

            for (var queryKey in this.query) {
                if (queryKey == 'isbn' || queryKey == 'ean') {
                    var isbns: any = queryKey == 'isbn' ? this.query.isbn.split(',') : this.query.ean.split(',');
                    for (var i: any = 0; i < isbns.length; i++) {
                        var isbn: any = isbns[i];
                        if (!isbn) continue;
                        isbn = isbn.split(' ')[0];
                        ean = toEan(isbn);
                        if (ean === null) continue;
                        isbna.push(ean);
                        fetcha.push({ isbn: isbn }); // pole objektu s dotazy
                    }
                }

                else if (queryKey == 'nbn') {
                    var nbns = this.query.nbn.split(',');
                    for (var i: any = 0; i < nbns.length; i++) {
                        var nbn: any = nbns[i];
                        if (!nbn) continue;
                        nbna.push(nbn);
                        fetcha.push({ nbn: nbn }); // pole objektu s dotazy
                    }
                }

                else if (queryKey == 'ismn') {
                    var ismns = this.query.ismn.split(',');
                    for (var i: any = 0; i < ismns.length; i++) {
                        var ismn: any = ismns[i];
                        if (!ismn) continue;
                        ismna.push(ismn);
                        fetcha.push({ ismn: ismn }); // pole objektu s dotazy
                    }
                }

                else if (queryKey == 'oclc') {
                    var oclcs: any = this.query.oclc.split(',');
                    for (var i: any = 0; i < oclcs.length; i++) {
                        var oclc: any = oclcs[i];
                        if (!oclc) continue;
                        oclca.push(oclc);
                        fetcha.push({ oclc: oclc }); // pole objektu s dotazy
                    }
                }

                else if (queryKey == 'multi') {
                    try {
                        var multis: any = JSON.parse(decodeURIComponent(this.query.multi));
                    } catch (err) {
                        this.send404IfNotValue(false, 'Check query syntax');
                        return;
                    }
                    for (var i: any = 0; i < multis.length; i++) {
                        var multi: any = multis[i];
                        var fetchMulti: any = {} // temporary

                        // odlozeni originalniho pozadavku bibinfo (bude vracen tak jak je v odpovedi)
                        fetchMulti.bibinfo = {};
                        for (var property in multi) {
                            if (multi.hasOwnProperty(property) && property != 'bibinfo') {
                                fetchMulti.bibinfo[property] = multi[property];
                            }
                        }

                        // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
                        if (multi.part_note) {
                            var parts: any = partParser.parse(multi.part_note);
                            if (parts.year) multi.part_year = parts.year;
                            if (parts.volume) multi.part_volume = parts.volume;
                            if (parts.part) multi.part_no = parts.part;
                            if (parts.part && !parts.year && !parts.volume) multi.part_name = parts.part;
                        }
                        // validation
                        if (!Helpers.partValidation(multi)) {
                            // jedna z casti obsahuje zakazane znaky, nebo kombinace casti neni validni
                            delete multi.part_year; delete multi.part_volume; delete multi.part_no; delete multi.part_name;
                        }
                        // normalizace
                        if (multi.part_year) multi.part_year = partParser.normalizeYear(multi.part_year);
                        if (multi.part_volume) multi.part_volume = partParser.normalizeVolume(multi.part_volume);
                        if (multi.part_no) multi.part_no = partParser.normalizePart(multi.part_no);
                        if (multi.part_name) multi.part_name = partParser.normalizePart(multi.part_name);

                        // normalizace spatne zduplikovaneho roku, rocniku, nebo cisla v pozadavku
                        if (multi.part_year && multi.part_volume && multi.part_year == multi.part_volume) {
                            if (multi.part_year.length == 4) delete multi.part_volume; else delete multi.part_year;
                        }
                        if (multi.part_year && multi.part_no && multi.part_year == multi.part_no) {
                            if (multi.part_year.length == 4) delete multi.part_no;
                        }

                        for (var key in multi) {
                            if (key == 'isbn' || key == 'ean') {
                                isbn = key=='isbn' ? multi.isbn.split(' ')[0] : multi.ean.split(' ')[0];
                                ean = toEan(isbn);
                                if (ean !== null) {
                                    isbna.push(ean);
                                    fetchMulti.isbn = isbn;
                                }
                            }
                            if (key == 'oclc') {
                                oclca.push(multi.oclc);
                                fetchMulti.oclc = multi.oclc;
                            }
                            if (key == 'nbn') {
                                nbna.push(multi.nbn);
                                fetchMulti.nbn = multi.nbn;
                            }
                            if (key == 'ismn') {
                                ismna.push(multi.ismn);
                                fetchMulti.ismn = multi.ismn;
                            }
                            if (key == 'uuid') {
                                uuida.push(multi.uuid);
                                fetchMulti.uuid = multi.uuid;
                            }
                            // U /api/book se dotazujeme na vic zaznamu, proto pozadavek pouze zaznamename, ale do DB se dotazujeme
                            // pomoci isbn, nbn, ismn, oclc. Pozadavek bude naparovany na ziskane zaznamy z MongoDB.
                            if (key == 'part_year') { fetchMulti.part_year = multi.part_year; }
                            if (key == 'part_volume') { fetchMulti.part_volume = multi.part_volume; }
                            if (key == 'part_no') { fetchMulti.part_no = multi.part_no; }
                            if (key == 'part_name') { fetchMulti.part_name = multi.part_name; }
                        }
                        fetcha.push(fetchMulti); // pole objektu s dotazy
                    }
                }
            }

            this.response.writeHead(200, { 'Content-Type': 'text/plain' });
            var json: any = [];

            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved bibinfo z BE
            var fetchaStr: any = [];
            for (var i: any = 0; i < fetcha.length; i++) {
                if (fetcha[i]) {
                    fetchaStr[i] = Helpers.getSortedBibinfo(fetcha[i].bibinfo);
                }
            }

            var dbFind = [];
            if (isbna.length) {
                dbFind.push({ ean13: { $in: isbna } });
                dbFind.push({ ean13_other: { $in: isbna } });
            }
            if (nbna.length) dbFind.push({ nbn: { $in: nbna } });
            if (ismna.length) dbFind.push({ ismn: { $in: ismna } });
            if (oclca.length) dbFind.push({ oclc: { $in: oclca } });
            if (uuida.length) dbFind.push({ uuid: { $in: uuida } });
            if (!dbFind.length) {
                this.send404IfNotValue(false, '[]');
                return;
            }

            this.db.collection(metaCollection).find({ $or: dbFind }).toArray(function(err, items_raw) {

                /* Projdi doposud ziskane vysledky z DB
                 * prirad jednotlivym dotazum odpovedi z DB (jeden zaznam muze byt odpoved na vic dotazu)
                 * dotazy, na ktere se nedohledaji zaznamy budou pouzite jako novy dotaz na API BE serveru */
                if (items_raw) {

                    var items: any = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;

                    for (var i: any = 0; i < items.length; i++) {
                        var itemInfo = s.getItemInfoFromItem(items[i]);

                        /* Blizsie info u API COVER */

                        if (itemInfo.item !== null) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN, 3=UUID, 4=ISMN, 5=OTHER ISBN
                            for (var j: any = 0; j <= 5; j++) {

                                // projdi dotazy (naparuje dotazy na ziskanou polozku z DB a posklada odpoved metadata API)
                                for (var k in fetcha) {
                                    var bibinfo: any = fetcha[k];
                                    var found: any = false;

                                    if (!s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                                        continue;
                                    }

                                    var found: any = s.itemFound(itemInfo, bibinfo, j);

                                    if (found) {
                                        itemInfo.item.bibinfo = bibinfo.bibinfo;
                                        var pos: any = fetchaStr.indexOf(Helpers.getSortedBibinfo(itemInfo.item.bibinfo));
                                        if (pos >= 0) {
                                            json[pos] = Helpers.replaceUrl(itemInfo.item, resSimple);
                                            delete fetchaStr[pos];
                                        } else {
                                            json.push(Helpers.replaceUrl(itemInfo.item, resSimple));
                                        }
                                        delete fetcha[k];
                                    }
                                }
                            }
                            if (!fetcha.length) break;
                        }
                    }// for items
                }// if items

                s.response.writeHead(200);
                s.response.end(JSON.stringify(json, null, ' '));

                //s.metadata(s, json);
            });
        }

        /**
		     * AUTH METADATA
		     **/
        // http://cache1.obalkyknih.cz/api/auth/meta/?id=jk01083016&sigla=CBA001&pretty=1
        else if ((this.requrl.indexOf(urlAuthMeta)) > 0) {
            var sigla: any = Permissions.ipValid(this.xreferer, this.remoteIP, this.query.sigla);
            var fetcha: any = []; // pole objektu s parametry {id:xxx},{id:yyy}
            var resSimple: any = this.query.simple;

            if (!this.isRequestValid(sigla, true, true)) {
                console.log('>>> xreferer or ip not valid: ' + this.xreferer + ' from IP: ' + this.remoteIP + ' request: ' + this.requrl);
                return;
            }

            if (!this.query.auth_id) {
                response.end('[]');
                return;
            }

            Statistics.addMetaAuthRequests(sigla);

            var ida: any = []; // pole s ID identifikatory

            for (queryKey in this.query) {
                if (queryKey == 'auth_id') {
                    var ids: any = this.query.auth_id.split(',');
                    for (var i: any = 0; i < ids.length; i++) {
                        var id: any = ids[i];
                        if (id) ida.push(id);
                        fetcha.push({ auth_id: id }); // pole objektu s dotazy
                    }
                }
            }

            this.response.writeHead(200, { 'Content-Type': 'text/plain' });
            var json: any = [];

            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved authinfo z BE
            var fetchaStr: any = [];
            for (var i: any = 0; i < fetcha.length; i++) {
                if (fetcha[i]) {
                    json.push(null);
                    if (fetcha[i].auth_id != '') fetchaStr[i] = JSON.stringify({ auth_id: fetcha[i].auth_id });
                }
            }

            s.db.collection(metaAuthCollection).find({ auth_id: { $in: ida } }).toArray(function(err, items) {

	            /* Projdi doposud ziskane vysledky z DB
	             * prirad jednotlivym dotazum odpovedi z DB (jeden zaznam muze byt odpoved na vic dotazu)
	             * dotazy, na ktere se nedohledaji zaznamy budou pouzite jako novy dotaz na API BE serveru */
                if (items) {

                    for (var i: any = 0; i < items.length; i++) {
                        var item: any = items[i];
                        var id: any = item.auth_id;

                        if (item !== null) {

                            // projdi dotazy (naparuje dotazy na ziskanou polozku z DB a posklada odpoved metadata API)
                            for (var k in fetcha) {
                                var authinfo: any = fetcha[k];
                                var found: any = false;

                                // ID authority
                                if (authinfo.auth_id) {
                                    if (authinfo.auth_id != id) continue;
                                    found = true;
                                }

                                if (found) {
                                    item.authinfo = authinfo;
                                    var pos: any = fetchaStr.indexOf(JSON.stringify(item.authinfo));
                                    if (pos >= 0) {
                                        json[pos] = Helpers.replaceUrl(item, resSimple);
                                        delete fetchaStr[pos];
                                    } else {
                                        json.push(Helpers.replaceUrl(item, resSimple));
                                    }
                                    delete fetcha[k];
                                }
                            }

                            if (!fetcha.length) break;
                        }
                    }// for items
                }// if items

                var fetchaBE: any = [];
                for (var i in fetcha) {
                    var authinfo: any = fetcha[i];
                    fetchaBE[i] = { authinfo: authinfo };
                }

                s.metadataAuth(s, fetchaBE, json);
            });
        }

        /**
         * STATISTIKY
         **/
        else if (this.query.stats === 'true') {
            var sigla: any = Permissions.ipValid(this.xreferer, this.remoteIP, this.query.sigla);
            if (!sigla && (this.remoteIP === '127.0.0.1' || this.remoteIP === '::1' || this.remoteIP === '::ffff:127.0.0.1')) sigla = 'admin';

            if (sigla) {
                Statistics.getStatisticsBySigla(this, sigla);
            } else {
                this.send404IfNotValue(false, 'Access denied ' + this.remoteIP);
            }
        }

        /**
         * RELOAD OPRAVNENI
         **/
        else if (this.query.permreload === 'true') {
            Permissions.reloadPerms(this);
        }

        /**
         * PRIDANI NOVEHO OPRAVNENI
         **/
        else if (this.query.permcreate === 'true' && this.query.sigla) {
            Permissions.addPerm(this);
        }

        /**
         * ALIVE
         **/
        else if ((this.requrl.indexOf(uriAlive)) > 0) {
            this.response.setHeader("Access-Control-Allow-Origin", "*");
            this.response.setHeader("Access-Control-Allow-Methods", "GET");
            this.response.setHeader("Access-Control-Allow-Headers", "*");
            this.response.writeHead(200);
            this.response.end('ALIVE');
        }

        /**
         * PRESMEROVANI POZADAVKU URCENYCH PRO WWW.OBALKYKNIH.CZ
         **/
        else if (this.requrl.substr(0, 5) == '/view') {
            this.response.writeHead(301, { Location: 'http://' + urlMain + this.requrl });
            this.response.end();
        }

        else {
            console.log("wrong query");
            this.send404IfNotValue(false);
        }

    }

    // nacteni metadat podle identifikatoru
    // pyta sa backendu na to co frontend este nema v cache
    // fetcha = identifikatory ktore sa dotazoval katalog v URL, ale v cache niesu
    // json = pole objektov zaznamov, ktore sa uz nasli v cache
    // http://www.obalkyknih.cz/api/books?books=[{%22bibinfo%22%3A{%22nbn%22%3A%22cnb001315197%22}%2C%22permalink%22%3A%22a%22}]&amp;review=1&amp;toc_full_text=1
    metadata(s: Server, fetcha: any, json: any, coverApi?: any, tocThumbApi?: any, tocPdfApi?: any) {
        var sigla = s.sigla; //zrusit ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var query = s.query;
        var now = s.now;
        var resSimple: any = query.simple;

        testLog("46", "!!!![metadata] sigla: " + sigla + ", query:" + JSON.stringify(query) + ", now: " + now);

        if ((fetcha.length > 0) && (now > Statistics.dateTimeout)) {

            // odlozeni pozadavku bokem (pripoji se rovno k odpovedi)
            var bibinfoOrig: any = new Array();
            for (var k in fetcha) {
                if (fetcha[k].bibinfo) {
                    bibinfoOrig[k] = {};
                    bibinfoOrig[k] = fetcha[k].bibinfo.bibinfo;
                    delete fetcha[k].bibinfo.bibinfo;
                }
            }

            // poskladani URL dotazu na BE
            var fetch: any = metaCollection == 'okcz' ? JSON.stringify(fetcha) : fetcha.join(',');
            fetch = encodeURIComponent(fetch);
            var url: string = 'http://' + urlMain + urlPart + urlMetadata + urlParams + fetch + '&amp;review=1&amp;toc_full_text=1'
            // console.log('request: ' + url); //debug

            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved bibinfo z BE
            var fetchaStr: any = [];
            if (metaCollection == 'okcz') {
                for (var i: any = 0; i < fetcha.length; i++) {
                    if (fetcha[i]) {
                        fetchaStr[i] = Helpers.getSortedBibinfo(fetcha[i].bibinfo);
                    }
                }
            }

            Statistics.addMetaFetches(sigla);

            request({ url: url, timeout: timeout }, function(error, res, body) {
                if (!error) {
                    // console.log(body);
                    try {
                        if (metaCollection == 'okcz') {
                            var jsonf: any = JSON.parse(body.substring(16, body.length - 3));
                        } else {
                            var jsonf: any = JSON.parse(body);
                        }
                    } catch (err) {
                        s.send404IfNotValue(false, 'JSON syntax error');
                        return;
                    }
                    // console.log(jsonf);

                    // projdi ziskane vysledky z BE serveru + uloz do DB unikatni kolekce
                    var fetchedAllready = [];
                    for (var i: any = 0; i < jsonf.length; i++) {
                        item = jsonf[i];
                        var recId: any = (item.ean13 || '#') + '-' + (item.oclc || '#') + '-' + (item.nbn || '#') + '-' + (item.ismn || '#');
                        delete item.permalink;

                        // Pridej do metadata kolekci pokud tam jeste neni.
                        // Kontroluje se protoze v jedinem back-end dotazu se muze vyskytnout stejny zaznam vice krat
                        // pokud se ptame napr. na parametr ISBN a podruhe na OCLC stejneho zaznamu.
                        if (!fetchedAllready[recId]) {
                            var id: any = new mongo.ObjectID();
                            id = id.toHexString();
                            fetchedAllready[recId] = id;
                            item._id = id;
                            db.collection(metaCollection).insert(item, { w: 1 }, function(err, result) {
                                if (err) { console.dir(err); }
                            });
                        } else {
                            item._id = fetchedAllready[recId];
                        }

                        if (!item.bibinfo || !fetchaStr.length) {
                            json.push(Helpers.replaceUrl(item, resSimple));
                        } else {
                            var pos: any = fetchaStr.indexOf(Helpers.getSortedBibinfo(item.bibinfo));
                            if (pos >= 0) {
                                json[pos] = Helpers.replaceUrl(item, resSimple, bibinfoOrig[pos]);
                                delete fetchaStr[pos];
                            } else
                                json.push(Helpers.replaceUrl(item, resSimple));
                        }
                    }
                } else {
                    if (error.code === 'ETIMEDOUT') {
                        Statistics.dateTimeout = new Date().getTime() + timeOutDuration;
                        Statistics.addTimeoutCount(sigla);
                        console.log('timeout : ' + Statistics.dateTimeout);
                    }
                }

                if (coverApi) {
                    var item: any = json[0];
                    var coverUrl: any = Helpers.getUrlByType(item, query.type);
                    if (s.sendPlaceholderIfNotValue(coverUrl)) {
                        return;
                    }
                    s.cover(s, coverUrl, coverApi, tocThumbApi);
                } else if (tocThumbApi) {
                    var item: any = json[0];
                    var tocThumbnailUrl: any = Helpers.getUrlByType(item, 'toc_thumbnail');
                    if (s.sendPlaceholderIfNotValue(tocThumbnailUrl)) {
                        return;
                    }
                    //console.log(tocThumbnailUrl);
                    s.cover(s, coverUrl || tocThumbnailUrl, coverApi, tocThumbApi);
                } else if (tocPdfApi) {
                    var item: any = json[0];
                    var tocPdfUrl: any = item.toc_pdf_url;
                    if (s.sendPlaceholderIfNotValue(tocPdfUrl)) {
                        return;
                    }
                    s.toc(s, tocPdfUrl);
                } else {
                    var restmp: any = JSON.stringify(json, null, query.pretty ? ' ' : '');
                    response.end(restmp);
                }
            });
        } else {
            if (coverApi) {
                Statistics.addCoverNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            } else if (tocThumbApi) {
                Statistics.addTocThumbnailNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            } else if (tocPdfApi) {
                Statistics.addTocPdfNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            } else {
                var restmp: any = JSON.stringify(json, null, query.pretty ? ' ' : '');
                response.end(restmp);
            }
        }
    }

    // Nacteni AUTH metadat podle identifikatoru
    // pyta sa backendu na to co frontend este nema v cache
    // fetcha = identifikatory ktore sa dotazoval katalog v URL, ale v cache niesu
    // json = pole objektov zaznamov, ktore sa uz nasli v cache
    // http://www.obalkyknih.cz/api/auth/meta?auth=[{%22authinfo%22%3A{%22id%22%3A%22jk01083016%22}}]
    metadataAuth(s: Server, fetcha: any, json: any, coverApi?: any) {
        var sigla = s.sigla; //zrusit ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var query = s.query;
        var now = s.now;

        testLog("46", "!!!![metadataAuth] sigla: " + sigla + ", query:" + JSON.stringify(query) + ", now: " + now);

        if ((fetcha.length > 0) && (now > Statistics.dateTimeout)) {

            // poskladani URL dotazu na BE
            var fetch: any = JSON.stringify(fetcha);
            fetch = encodeURIComponent(fetch);
            var urlAuthMeta: string = "api/auth/meta"
            var url: string = 'http://' + urlMain + urlPart + urlAuthMetaBE + urlAuthParams + fetch;
            // console.log('request: ' + url); //debug

            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved bibinfo z BE
            var fetchaStr: any = [];
            var fetchaUri: any = [];
            if (metaAuthCollection == 'okcz_auth') {
                for (var i: any = 0; i < fetcha.length; i++) {
                    if (fetcha[i]) {
                        if (fetcha[i].authinfo.auth_id != '') {
                            fetchaStr[i] = JSON.stringify(fetcha[i]);
                            fetchaUri.push(fetcha[i]);
                        }
                    }
                }
            }

            Statistics.addMetaAuthFetches(sigla);

            request({ url: url, timeout: timeout }, function(error, res, body) {
                if (!error) {
                    try {
                        if (metaAuthCollection == 'okcz_auth') {
                            var jsonf: any = JSON.parse(body.substring(16, body.length - 3));
                        } else {
                            var jsonf: any = JSON.parse(body);
                        }
                    } catch (err) {
                        s.send404IfNotValue(false, 'JSON syntax error');
                        return;
                    }

                    // projdi ziskane vysledky z BE serveru + uloz do DB unikatni kolekce
                    var fetchedAllready = [];
                    for (var i: any = 0; i < jsonf.length; i++) {
                        item = jsonf[i];
                        var recId: any = item.auth_id;
                        delete item.permalink;

                        // Pridej do metadata kolekci pokud tam jeste neni.
                        // Kontroluje se protoze v jedinem back-end dotazu se muze vyskytnout stejny zaznam vice krat
                        // pokud se ptame napr. na parametr ISBN a podruhe na OCLC stejneho zaznamu.
                        if (!fetchedAllready[recId]) {
                            var id: any = new mongo.ObjectID();
                            id = id.toHexString();
                            fetchedAllready[recId] = id;
                            item._id = id;
                            db.collection(metaAuthCollection).insert(item, { w: 1 }, function(err, result) {
                                if (err) { console.dir(err); }
                            });
                        } else {
                            item._id = fetchedAllready[recId];
                        }

                        if (!item.authinfo || !fetchaStr.length) {
                            json.push(Helpers.replaceUrl(item, undefined));
                        } else {
                            var fetchaStrAuthinfo: any = '{"authinfo":' + JSON.stringify(item.authinfo) + '}';
                            var pos: any = fetchaStr.indexOf(fetchaStrAuthinfo);
                            if (pos >= 0) {
                                json[pos] = Helpers.replaceUrl(item, undefined);
                                delete fetchaStr[pos];
                            } else
                                json.push(Helpers.replaceUrl(item, undefined));
                        }
                    }
                } else {
                    if (error.code === 'ETIMEDOUT') {
                        Statistics.dateTimeout = new Date().getTime() + timeOutDuration;
                        Statistics.addTimeoutCount(sigla);
                        console.log('timeout : ' + Statistics.dateTimeout);
                    }
                }

                if (coverApi) {
                    var item: any = json[0];
                    var coverUrl: any = Helpers.getUrlByType(item, query.type);
                    if (s.sendPlaceholderIfNotValue(coverUrl)) {
                        return;
                    }
                    s.cover(s, coverUrl, coverApi, false, false);
                } else {
                    var restmp: any = JSON.stringify(json, null, query.pretty ? ' ' : '');
                    response.end(restmp);
                }
            });
        } else {
            if (coverApi) {
                Statistics.addCoverNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            } else {
                var restmp: any = JSON.stringify(json, null, query.pretty ? ' ' : '');
                response.end(restmp);
            }
        }
    }

    // ziskani / stazeni obalky podle url souborove cesty
    cover(s: Server, coverUrl: any, coverApi?: any, tocThumbApi?: any) {
        var sigla = s.sigla;
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var query = s.query;
        var now = s.now;
        var remoteIP = s.remoteIP;
        var referer = s.referer;
        var timestamp = s.timestamp;
        var etag = s.etag;

        testLog("43", "!!!![metadata] sigla: " + sigla + ", query:" + JSON.stringify(query) + ", now: " + now + ", remoteIP:" + remoteIP + ", referer: " + referer + ", timestamp: " + timestamp + ", etag: " + etag);

        // var coverUrl=requrl.split('?')[0];
        if (query.keywords) {
            var keywords: any = query.keywords.trim().replace(/\s+|\t+/g, ' ').split(' ');
        } else {
            var keywords: any = [];
        }

        db.collection('cover').findOne({ url: coverUrl }, function(err, item) {
            // typ dokumentu, ktery nacitame (cover, nebo toc nahled)
            var coverType: any = 'cover';
            if (tocThumbApi || (coverUrl.indexOf(urlTocFile)) > 0) coverType = 'toc';

            if ((item !== null) && (!item.notfound)) {
                // nastav etag
                if (coverType == 'cover') {
                    response.setHeader('Etag', item._id);
                    etags[item._id] = null;
                } else if (coverType == 'toc') {
                    response.setHeader('Etag', 'toct-' + md5(coverUrl));
                    etags['toct-' + md5(coverUrl)] = null;
                }

                response.writeHead(200, { 'Content-Type': 'image/jpeg', 'Etag': 'toct-' + md5(coverUrl) });
                response.end(item.x.buffer);
                db.collection('logs').insert({ sigla: sigla, ip: remoteIP, referer: referer, op: coverUrl, state: 'local', keywords: keywords, timestamp: timestamp }, { w: 0 });
            }
            else if (item && (item.notfound > now)) {
                if (coverApi || tocThumbApi) {
                    s.sendPlaceholderIfNotValue(false);
                } else {
                    s.send404IfNotValue(false);
                }
            }
            else if (now > Statistics.dateTimeout) {
                var options: any = {
                    hostname: urlMain,
                    path: coverUrl
                };

                var request: any = http.request(options, function(res) {
                    if (!item) {
                        var id: any = new mongo.ObjectID();
                    } else {
                        var id: any = item._id;
                    }

                    // zaznac do statistik zadost o stazeni obalkyl; bez ohledu na to, jestli se povede
                    if (coverType == 'cover') {
                        Statistics.addCoverFetches(sigla)
                        etag = id.toHexString();
                    } else if (coverType == 'toc') {
                        Statistics.addTocThumbnailFetches(sigla);
                        etag = 'toct-' + md5(coverUrl);
                    }

                    etags[etag] = null;
                    response.setHeader('Etag', etag);

                    if (res.statusCode !== 200) {
                        // obalka nebyla stazena; poznac do statistik
                        if (coverType == 'cover') {
                            Statistics.addCoverNotfound(sigla);
                        } else if (coverType == 'toc') {
                            Statistics.addTocThumbnailNotfound(sigla);
                        }
                        if (!item) {
                            db.collection('cover').insert({ notfound: now + timeNotfound, _id: id, url: coverUrl }, { w: 1 }, function(err, result) {
                                if (err) { console.dir(err); }
                            });
                        } else {
                            db.collection('cover').update({ _id: id }, { notfound: now + timeNotfound, url: coverUrl }, { w: 1 }, function(err, result) {
                                if (err) { console.dir(err); }
                            });
                        }

                        if (coverApi || tocThumbApi) {
                            s.sendPlaceholderIfNotValue(false);
                        } else {
                            s.send404IfNotValue(false);
                        }

                        return;
                    }
                    response.writeHead(200, { 'Content-Type': 'image/jpeg', 'Etag': etag });

                    //var cover='';
                    var data: any = [];
                    res.on('error', function(e) {
                        console.log(e);
                    });


                    res.on('data', function(chunk) {
                        data.push(chunk);
                        response.write(chunk);
                    }); //.pipe(response);

                    res.on('end', function() {
                        response.end();
                        var cover: any = new Buffer(data.reduce(function(prev, current) {
                            return prev.concat(Array.prototype.slice.call(current));
                        }, []));
                        var binary: any = new mongo.Binary(cover);

                        db.collection('cover').insert({ x: binary, _id: id, url: coverUrl }, { w: 1 }, function(err, result) {
                            if (err) { console.dir(err); }
                        });
                        db.collection('logs').insert({ sigla: sigla, ip: remoteIP, referer: referer, op: coverUrl, state: 'fetch', keywords: keywords, timestamp: timestamp }, { w: 0 });
                    });

                });

                request.setTimeout(timeout, function() {
                    Statistics.dateTimeout = new Date().getTime() + timeOutDuration;
                    Statistics.addTimeoutCount(sigla);
                    console.log('timeout : ' + Statistics.dateTimeout);
                    request.abort();
                    response.end()
                });

                request.on('error', function(err) {
                    if (err.code === "ECONNRESET") {
                        console.log("Timeout occurs");
                    }
                });

                request.end()
            }
            else {
                // console.log('cover404');
                if (coverApi || tocThumbApi) {
                    s.sendPlaceholderIfNotValue(false);
                } else {
                    s.send404IfNotValue(false);
                }
            }
        });
    }

    // poskytnuti souboru s TOC
    toc(s: Server, reqUrl: any) {
        var sigla = s.sigla;
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var remoteIP = s.remoteIP;
        var referer = s.referer;
        var timestamp = s.timestamp;

        testLog("43", "!!!![metadata] sigla: " + sigla + ", req: " + req + ", db: " + db + ", response: " + response + ", remoteIP:" + remoteIP + ", referer: " + referer + ", timestamp: " + timestamp);

        reqUrl = reqUrl.replace('http://' + urlMain, '');
        var tocPdfUrlSegments: any = reqUrl.split('/');
        var tocFileName: any = tocPdfUrlSegments[tocPdfUrlSegments.length - 2];
        var tocExtension: any = tocPdfUrlSegments[tocPdfUrlSegments.length - 1];
        if (!tocFileName) {
            s.send404IfNotValue(false);
        }

        var mimeType: any = 'application/' + (tocExtension || 'pdf');
        var tocFileEncapDir: any = Math.ceil((parseInt(tocFileName) + 1) / 10000) * 10000;
        var tocFilePath: any = tocFileDir + tocFileEncapDir + '/' + tocFileName + '.' + (tocExtension || 'pdf');
        fileSystem.exists(tocFilePath, function(exists) {
            if (exists) {
                var tocFileStat: any = fileSystem.statSync(tocFilePath);
                console.log('toc ' + tocExtension + ': ' + tocFilePath);
                response.writeHead(200, {
                    'Content-Type': mimeType,
                    'Content-Length': tocFileStat.size,
                    'Etag': 'tocp-' + md5(tocFilePath)
                });
                etags['tocp-' + md5(tocFilePath)] = null;
                var readStream: any = fileSystem.createReadStream(tocFilePath);
                readStream.pipe(response);
                db.collection('logs').insert({ sigla: sigla, ip: remoteIP, referer: referer, op: urlTocFile + '/' + tocFileName + uriPartTocPdf, state: 'local', keywords: [], timestamp: timestamp }, { w: 0 });
            } else {
                Statistics.addTocPdfNotfound(sigla);
                s.send404IfNotValue(false);
            }
        });
    }

    /* VLASTNE -------------------------------------------------------------------------------------------------- */
    isRequestValid(sigla: any, validate_sigla: boolean, validate_parameters: boolean = false, validate_query_book_id_AND_query_id: boolean = false, validate_query_id: boolean = false): boolean {
        if (validate_sigla && !sigla) {
            var ipv4 = this.remoteIP;
            if (ipv4.indexOf('::ffff:')!==-1) ipv4 = ipv4.substring(7);
            this.send404IfNotValue(false, 'Unknown referer. You need to sign up at http://www.obalkyknih.cz and provide your catalog URL; Referer: ' + this.referer + '  IP: ' + ipv4);
            return false;
        }
        if (validate_parameters && !this.query.isbn && !this.query.nbn && !this.query.ismn && !this.query.oclc && !this.query.ean && !this.query.multi && !this.query.auth_id && !this.query.uuid) {
            console.log('Param missing');
            this.send404IfNotValue(false);
            return false;
        }
        if (validate_query_book_id_AND_query_id && (!sigla || !this.query.book_id || !this.query.id)) {
            console.log('add review denied ' + this.remoteIP);
            this.send404IfNotValue(false, 'Add review denied' + (!this.query.book_id ? ' (book_id missing)' : '') + (!this.query.id ? ' (ID param missing)' : ''));
            return false;
        }
        if (validate_query_id && (!sigla || !this.query.id)) {
            console.log('del review denied ' + this.remoteIP);
            this.send404IfNotValue(false, 'Del review denied' + (!this.query.id ? ' (id missing)' : ''));
            return false;
        }

        return true;
    }

    getResult(): Result {
        // parse params

        if (this.query.isbn || this.query.ean) {
            var isbn: any = this.query.isbn ? this.query.isbn.split(' ')[0] : this.query.ean.split(' ')[0];
            var value: any = toEan(isbn);
            var sel: any = { $or: [{ ean: value }, { ean_other: value }] };
            var bib: any = { isbn: value };
            return (!value) ? undefined : { bib: bib, sel: sel };
        }
        else if (this.query.nbn) {
            var value: any = this.query.nbn;
            var sel: any = bib = { nbn: value };
            return (!value) ? undefined : { bib: bib, sel: sel };
        }
        else if (this.query.ismn) {
            var value: any = this.query.ismn.replace('-','');
            var sel: any = bib = { ismn: value };
            return (!value) ? undefined : { bib: bib, sel: sel };
        }
        else if (this.query.oclc) {
            var value: any = this.query.oclc;
            var sel: any = bib = { oclc: value };
            return (!value) ? undefined : { bib: bib, sel: sel };
        } else if (this.query.multi) {
            var bib: any = {};
            var sel: any = { $or: [] };
            try {
                this.query.multi = decodeURIComponent(this.query.multi);
                var multis: any = JSON.parse(decodeURIComponent(this.query.multi));
            } catch (err) {
                this.response.writeHead(404);
                this.response.end('Check query syntax');
                return;
            }
            if (multis.isbn || multis.ean) {
                var isbn: any = multis.isbn ? multis.isbn.split(' ')[0] : multis.ean.split(' ')[0];
                var value: any = toEan(isbn);
                sel.$or.push({ ean: value });
                sel.$or.push({ ean_other: value });
                bib.isbn = value;
            }
            if (multis.ismn) {
                var ismn: any = multis.ismn;
                ismn = ismn.replace(/\-/g, '');
                sel.$or.push({ ismn: ismn });
                bib.ismn = ismn;
            }
            if (multis.oclc) { sel.$or.push({ oclc: multis.oclc }); bib.oclc = multis.oclc; }
            if (multis.nbn) { sel.$or.push({ nbn: multis.nbn }); bib.nbn = multis.nbn; }

            // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
            if (multis.part_note) {
                var parts: any = partParser.parse(multis.part_note);
                if (parts.year) multis.part_year = parts.year;
                if (parts.volume) multis.part_volume = parts.volume;
                if (parts.part) multis.part_no = parts.part;
                if (parts.part && !parts.year && !parts.volume) multis.part_name = parts.part;
            }
            if (Helpers.partValidation(multis)) {
                // normalizace
                if (multis.part_year) multis.part_year = partParser.normalizeYear(multis.part_year);
                if (multis.part_volume) multis.part_volume = partParser.normalizeVolume(multis.part_volume);
                if (multis.part_no) multis.part_no = partParser.normalizePart(multis.part_no);
                if (multis.part_name) multis.part_name = partParser.normalizePart(multis.part_name);

                // normalizace spatne zduplikovaneho roku, rocniku, nebo cisla v pozadavku
                if (multis.part_year && multis.part_volume && multis.part_year == multis.part_volume) {
                    if (multis.part_year.length == 4) delete multis.part_volume; else delete multis.part_year;
                }
                if (multis.part_year && multis.part_no && multis.part_year == multis.no) {
                    if (multis.part_year.length == 4) delete multis.part_no;
                }

                // dotaz na periodikum
                if (multis.part_year || multis.part_volume) {
                    if (multis.part_year) { bib.part_year = multis.part_year; }
                    if (multis.part_volume) { bib.part_volume = multis.part_volume; }
                    if (multis.part_no) { bib.part_no = multis.part_no; }
                }
                // dotaz na vicesvazkovou monografii pomoci part_no (245n) a zaroven part_name (245p)
                else if (multis.part_no && multis.part_name) {
                    bib.part_no = multis.part_no;
                    bib.part_name = multis.part_name;
                }
                // dotaz na vicesvazkovou monografii pouze pomoci part_no (245n)
                else if (multis.part_no) {
                    bib.part_no = multis.part_no;
                }
                // dotaz na vicesvazkovou monografii pouze pomoci part_name (245p)
                else if (multis.part_name) {
                    bib.part_name = multis.part_name;
                }
            }

            return (sel.$or.length <= 0) ? undefined : { bib: bib, sel: sel };
        }
        else {
            return undefined;
        }

    }
    //ak posle vrati true, ak neposle vrati false
    sendPlaceholderIfNotValue(value: any) {
        if (!value) {
            console.log("identifier " + this.requrl);
            this.response.writeHead(200, { 'Content-Type': 'image/gif' });
            this.response.end(Server.placeholder);
            return true;
        }
        else {
            return false;
        }
    }

    //ak posle vrati true, ak neposle vrati false
    send404IfNotValue(value: any, message: any = undefined) {
        if (!value) {
            this.response.writeHead(404);

            if (message)
                this.response.end(message);
            else
                this.response.end();

            return true;
        }
        else {
            return false;
        }
    }



    getSortedItemsFromItemsRaw(items_raw: any): any {
        /* Serazeni podle part_root */
        var items_root: any = [], items_common = [], items_root_bare = [], items_common_bare = [];
        for (var i = 0; i < items_raw.length; i++) {
            var tmp_part_root: any = items_raw[i].part_root || '1';
            var tmp_flag_bare_record: any = items_raw[i].flag_bare_record || '1';

            // prioritu maji uzitecne casti s part_root = 1
            if (tmp_part_root == '1' && tmp_flag_bare_record == '0')
                items_root.push(items_raw[i]);

            // pote zbytek part_root = 1
            else if (tmp_part_root == '1')
                items_root_bare.push(items_raw[i]);

            // dale normalni uzitecne zaznamy
            else if (tmp_flag_bare_record == '1')
                items_common.push(items_raw[i]);

            // a na konci pole budou ty nepotrebne
            else
                items_common_bare.push(items_raw[i]);
        }
        return items_root.concat(items_root_bare).concat(items_common).concat(items_common_bare);
    }

    getItemInfoFromItem(item: any): ItemInfo {
        var itemInfo = <ItemInfo>{};
        itemInfo.item = item;
        itemInfo.ean13 = item.ean13;
        itemInfo.ean13_other = item.ean13_other;
        itemInfo.nbn = item.nbn;
        itemInfo.ismn = item.ismn;
        itemInfo.oclc = item.oclc;
        itemInfo.uuid = item.uuid;
        itemInfo.part_year = item.part_year;
        itemInfo.part_volume = item.part_volume;
        itemInfo.part_no = item.part_no;
        itemInfo.part_name = item.part_name;
        itemInfo.part_root = item.part_root || '1';
        itemInfo.part_ean13_standalone = item.part_ean13_standalone || '0';
        itemInfo.part_nbn_standalone = item.part_nbn_standalone || '0';
        itemInfo.part_ismn_standalone = item.part_ismn_standalone || '0';
        itemInfo.part_oclc_standalone = item.part_oclc_standalone || '0';
        return itemInfo;
    }

    isGoodItemInfoForBibInfo(itemInfo: ItemInfo, bibinfo: any): boolean {
        return (
            // periodikum podle roku a cisla
            (itemInfo.part_year && itemInfo.part_no && bibinfo.part_year && bibinfo.part_no && itemInfo.part_year == bibinfo.part_year && itemInfo.part_no == bibinfo.part_no) ||
            // periodikum podle rocniku a cisla
            (itemInfo.part_volume && itemInfo.part_no && bibinfo.part_volume && bibinfo.part_no && itemInfo.part_volume == bibinfo.part_volume && itemInfo.part_no == bibinfo.part_no) ||
            // periodikum podle roku a rocniku
            ((itemInfo.part_year || itemInfo.part_volume) && !itemInfo.part_no && (bibinfo.part_year || bibinfo.part_volume) && ((itemInfo.part_year == bibinfo.part_year && itemInfo.part_year) || (itemInfo.part_volume == bibinfo.part_volume && itemInfo.part_volume))) ||
            // monografie podle cisla casti
            (itemInfo.part_no && bibinfo.part_no && !bibinfo.part_year && !bibinfo.part_volume && itemInfo.part_no == bibinfo.part_no) ||
            // monografie podle nazvu casti
            (itemInfo.part_name && bibinfo.part_name && !bibinfo.part_year && !bibinfo.part_volume && itemInfo.part_name == bibinfo.part_name) ||
            // souborny zaznam, nebo cast monografie bez dotazu na konkretni cast
            (!bibinfo.part_no && !bibinfo.part_name && !bibinfo.part_year && !bibinfo.part_volume) ||
            // souborny zaznam, s dotazem na cast monografie bez dotazu na konkretni cast
            (!bibinfo.part_year && !bibinfo.part_volume && !itemInfo.part_no && !itemInfo.part_name));
    }

    itemFound(itemInfo: ItemInfo, bibinfo: any, j: number): boolean {
        if (j == 0 && bibinfo.isbn) {
            // ISBN
            var isbnBib: any = bibinfo.isbn.split(' ')[0];
            isbnBib = toEan(isbnBib);
            if (!isbnBib || !itemInfo.ean13) return false;
            if (isbnBib != itemInfo.ean13) return false;
            if (itemInfo.part_root == '0' && itemInfo.part_ean13_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume)) return false;
            return true;
        } else if (j == 1 && bibinfo.nbn) {
            // NBN
            if (!bibinfo.nbn || !itemInfo.nbn) return false;
            if (bibinfo.nbn != itemInfo.nbn) return false;
            if (itemInfo.part_root == '0' && itemInfo.part_nbn_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume)) return false;
            return true;
        } else if (j == 2 && bibinfo.oclc) {
            // OCLC
            if (!bibinfo.oclc || !itemInfo.oclc) return false;
            if (bibinfo.oclc != itemInfo.oclc) return false;
            if (itemInfo.part_root == '0' && itemInfo.part_oclc_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume)) return false;
            return true;
        } else if (j == 3 && bibinfo.uuid) {
            // UUID
            if (!bibinfo.uuid.length || !itemInfo.uuid) return false;
            return (itemInfo.uuid.indexOf(bibinfo.uuid) > -1) ? true : false;
        } else if (j == 4 && bibinfo.ismn) {
            // ISMN
            if (!bibinfo.ismn || !itemInfo.ismn) return false;
            bibinfo.ismn = bibinfo.ismn;
            if (bibinfo.ismn != itemInfo.ismn) return false;
            if (itemInfo.part_root == '0' && itemInfo.part_ismn_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume)) return false;
            return true;
        } else if (j == 5 && bibinfo.isbn) {
            // OTHER ISBN
            var isbnBib: any = bibinfo.isbn.split(' ')[0];
            isbnBib = toEan(isbnBib);
            var ean_other_length: number = 0;
            if (itemInfo.ean13_other) ean_other_length = itemInfo.ean13_other.length;
            for (var i: number = 0; i < ean_other_length; i++) {
                var item = itemInfo.ean13_other[i];
                if (!isbnBib || !item) return false;
                if (isbnBib != item) return false;
                if (itemInfo.part_root == '0' && itemInfo.part_ean13_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume)) return false;
                return true;
            }
        }
    }

}

module.exports = {
    server: server,
    getPerms: Permissions.getPerms
}

function testLog(color, message) {
    console.log('\x1b[' + color + 'm', message, '\x1b[0m'); //debug
}
